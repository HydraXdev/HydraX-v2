#!/usr/bin/env python3
"""
Optimized Flask server with lazy loading and consolidated imports
Reduced memory footprint and improved performance
"""

import os
# ## LIVE_BALANCE_HELPER_START
def _bitten_get_live_balance(db_path, user_id=None, target_uuid=None):
    import sqlite3
    conn=sqlite3.connect(db_path)
    conn.row_factory=lambda c,r:{d[0]:r[i] for i,d in enumerate(c.description)}
    try:
        row=None
        if target_uuid:
            row=conn.execute("SELECT last_balance,last_equity FROM ea_instances WHERE target_uuid=? ORDER BY last_seen DESC LIMIT 1",(target_uuid,)).fetchone()
        if (not row) and user_id:
            row=conn.execute("SELECT last_balance,last_equity FROM ea_instances WHERE user_id=? ORDER BY last_seen DESC LIMIT 1",(str(user_id),)).fetchone()
        if not row: return (None,None)
        return (row.get('last_balance'), row.get('last_equity'))
    finally:
        conn.close()
# ## LIVE_BALANCE_HELPER_END
# ## FOMO_TIER_HELPER_START
import json as _json, os as _os, sqlite3 as _sqlite3
_CLASS_RULES = _json.loads(_os.environ.get("CLASS_FIRE_RULES_JSON",'{"RAPID":["FREE","BASIC","PRO","ELITE"],"SNIPER":["PRO","ELITE"]}'))
def _bitten_can_fire(user_tier:str, pattern_class:str)->bool:
    try:
        allow = _CLASS_RULES.get(pattern_class, [])
        return (user_tier or "FREE") in allow
    except: return False
def _bitten_user_tier(db_path, user_id):
    try:
        conn=_sqlite3.connect(db_path)
        row=conn.execute("SELECT tier FROM users WHERE user_id=?",(user_id,)).fetchone()
        conn.close()
        return row[0] if row and row[0] else "FREE"
    except: return "FREE"
def _bitten_signal_class_from_id(db_path, signal_id):
    try:
        conn=_sqlite3.connect(db_path)
        # First try signals table
        row=conn.execute("SELECT payload_json FROM signals WHERE signal_id=?",(signal_id,)).fetchone()
        if row and row[0]:
            payload = _json.loads(row[0])
            pt = payload.get('pattern_type')
        else:
            # Fallback to missions table
            row=conn.execute("SELECT payload_json FROM missions WHERE signal_id=?",(signal_id,)).fetchone()
            if row and row[0]:
                payload = _json.loads(row[0])
                pt = payload.get('pattern_type')
            else:
                pt = None
        conn.close()
        if not pt: return "SNIPER"
        mp=_json.loads(_os.environ.get("PATTERN_CLASS_JSON",'{"VCB_BREAKOUT":"RAPID","LIQUIDITY_SWEEP_REVERSAL":"SNIPER","ORDER_BLOCK_BOUNCE":"SNIPER","FAIR_VALUE_GAP_FILL":"SNIPER"}'))
        return mp.get(pt,"SNIPER")
    except: return "SNIPER"
# ## FOMO_TIER_HELPER_END
# ## FIRE_SHADOW_PATCH_START
def _bitten_fire_xadd(redis_host, redis_port, stream, payload):
    try:
        import redis, json
        print(f"[SHADOW] Publishing to {stream}", flush=True)
        r = redis.Redis(host=redis_host, port=int(redis_port), decode_responses=True)
        # store as event JSON; keep key fields also for XPENDING/XCLAIM tooling
        fields = {
            "event": json.dumps(payload),
            "fire_id": payload.get("fire_id",""),
            "idem": payload.get("idem",""),
            "user_id": str(payload.get("user_id","")),
            "target_uuid": payload.get("target_uuid",""),
            "symbol": payload.get("symbol",""),
        }
        msg_id = r.xadd(stream, fields)
        print(f"[SHADOW] Added to {stream}: {msg_id}", flush=True)
        return True
    except Exception as e:
        print(f"fire_xadd error: {e}", flush=True)
        return False
# ## FIRE_SHADOW_PATCH_END
# ## FIRE_MAPPING_PATCH_START
def _bitten_get_or_create_mission(db_path, user_id, signal_id, target_uuid=None):
    """
    Idempotent mission creation for user+signal combination.
    Returns mission_id if created or found.
    """
    conn = None
    try:
        conn = sqlite3.connect(db_path)
        conn.row_factory = sqlite3.Row
        cur = conn.cursor()
        
        # Check if mission already exists for this user+signal
        # Also check legacy missions with mission_id containing USER_
        existing = cur.execute(
            '''SELECT mission_id FROM missions 
               WHERE (user_id = ? AND signal_id = ?) 
                  OR mission_id = ?''',
            (user_id, signal_id, f"{signal_id}_USER_{user_id}")
        ).fetchone()
        
        if existing:
            conn.close()
            return existing['mission_id']
        
        # Get signal data from signals table
        signal_row = cur.execute(
            'SELECT payload_json FROM signals WHERE signal_id = ?',
            (signal_id,)
        ).fetchone()
        
        if not signal_row:
            conn.close()
            return None
            
        # Parse the existing payload_json
        try:
            signal_data = json.loads(signal_row['payload_json']) if signal_row['payload_json'] else {}
        except:
            signal_data = {'signal_id': signal_id}
            
        payload = {
            'signal_id': signal_id,
            'signal': signal_data,
            'user_id': user_id,
            'created_at': int(time.time())
        }
        
        # Get fresh EA for user if not provided
        if not target_uuid:
            ea_row = cur.execute(
                '''SELECT target_uuid FROM ea_instances 
                   WHERE user_id = ? AND (strftime('%s','now') - last_seen) < 180
                   ORDER BY last_seen DESC LIMIT 1''',
                (user_id,)
            ).fetchone()
            if ea_row:
                target_uuid = ea_row['target_uuid']
        
        # Create mission
        mission_id = f"{signal_id}_USER_{user_id}"
        expires_at = int(time.time()) + 7200  # 2 hour expiry
        
        cur.execute('''
            INSERT INTO missions (mission_id, signal_id, user_id, payload_json, status, expires_at, created_at, target_uuid)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?)
        ''', (
            mission_id,
            signal_id,
            user_id,
            json.dumps(payload),
            'PENDING',
            expires_at,
            int(time.time()),
            target_uuid
        ))
        
        conn.commit()
        conn.close()
        return mission_id
        
    except Exception as e:
        logging.error(f"Error in _bitten_get_or_create_mission: {e}")
        if conn:
            conn.close()
        return None

def _bitten_resolve_user_and_check_fresh(db_path, target_uuid, freshness_sec=180):
    import sqlite3, time
    conn=sqlite3.connect(db_path)
    conn.row_factory=lambda c,r:{d[0]:r[i] for i,d in enumerate(c.description)}
    try:
        row=conn.execute("SELECT user_id, last_seen FROM ea_instances WHERE target_uuid=?",(target_uuid,)).fetchone()
        if not row or not row.get("user_id"):
            return (None, "mapping_missing")
        age = int(time.time()) - int(row.get("last_seen") or 0)
        if age>freshness_sec:
            return (row["user_id"], f"stale:{age}")
        return (row["user_id"], "fresh")
    finally:
        conn.close()
# ## FIRE_MAPPING_PATCH_END
import sys
import json
import logging
import time
from pathlib import Path
import random
from datetime import datetime
import sqlite3
from contextlib import contextmanager
import zmq

# Core Flask imports (always needed)
from flask import Flask, render_template, render_template_string, request, jsonify, redirect
from flask_socketio import SocketIO

# Load environment early
from dotenv import load_dotenv
load_dotenv()

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# IPC Queue configuration
QUEUE_ADDR = os.environ.get("BITTEN_QUEUE_ADDR", "ipc:///tmp/bitten_cmdqueue")

# --- ADD/REPLACE: single enqueue helper ---
_zmq_ctx = None
_push_sock = None

def _get_enqueue_socket():
    global _zmq_ctx, _push_sock
    if _zmq_ctx is None:
        _zmq_ctx = zmq.Context.instance()
    if _push_sock is None:
        s = _zmq_ctx.socket(zmq.PUSH)
        s.setsockopt(zmq.LINGER, 0)
        s.setsockopt(zmq.SNDHWM, 10000)
        s.connect(QUEUE_ADDR)
        _push_sock = s
        logger.info(f"🧵 Queue connected: {QUEUE_ADDR}")
    return _push_sock

def enqueue_fire(payload: dict) -> None:
    """Send fire to IPC queue; raises Exception on failure."""
    s = _get_enqueue_socket()
    try:
        s.send_json(payload, flags=zmq.DONTWAIT)
        logger.info(f"ENQ {payload.get('fire_id')} → queue")
    except Exception as e:
        # one fast reconnect attempt in case router restarted
        global _push_sock
        try:
            if _push_sock is not None:
                _push_sock.close(0)
            _push_sock = None
            s = _get_enqueue_socket()
            s.send_json(payload, flags=zmq.DONTWAIT)
            logger.info(f"ENQ {payload.get('fire_id')} → queue (reconnected)")
        except Exception as e2:
            logger.exception("❌ enqueue_fire failed")
            raise

def _auto_fire_for_signal(signal: dict) -> dict:
    """Process AUTO mode fires for all eligible users for a given signal"""
    import sqlite3
    import json
    import uuid
    from datetime import datetime
    
    result = {
        "auto_users_considered": 0,
        "auto_fired": 0,
        "skipped": {}
    }
    
    db_path = os.environ.get("BITTEN_DB", "/root/HydraX-v2/bitten.db")
    
    try:
        conn = sqlite3.connect(db_path)
        conn.row_factory = sqlite3.Row
        cur = conn.cursor()
        
        # Get signal details
        signal_id = signal.get("signal_id", "")
        symbol = signal.get("symbol", signal.get("pair", ""))
        direction = signal.get("direction", "").upper()
        entry_price = float(signal.get("entry_price", 0))
        stop_pips = float(signal.get("stop_pips", signal.get("stop_loss_pips", 10)))
        target_pips = float(signal.get("target_pips", signal.get("take_profit_pips", 20)))
        
        if not all([signal_id, symbol, direction in ["BUY", "SELL"], entry_price > 0]):
            logger.warning(f"AUTO: Invalid signal data for {signal_id}")
            return result
        
        # Load candidate users - AUTO mode with fresh EA (≤120s)
        # First try to get users from fire_mode database
        fire_mode_users = set()
        try:
            # Check fire_mode.db in src/bitten_core
            fire_mode_db_path = "/root/HydraX-v2/src/bitten_core/fire_mode.db"
            if os.path.exists(fire_mode_db_path):
                fire_conn = sqlite3.connect(fire_mode_db_path)
                fire_cur = fire_conn.cursor()
                fire_cur.execute("""
                    SELECT user_id FROM user_fire_modes 
                    WHERE current_mode = 'AUTO'
                """)
                for row in fire_cur.fetchall():
                    fire_mode_users.add(str(row[0]))
                fire_conn.close()
        except Exception as e:
            logger.debug(f"Could not read fire_mode.db: {e}")
        
        # For now, hardcode user 7176191872 as AUTO if they changed back
        # This ensures the system works even if fire_mode.db is not populated
        if not fire_mode_users:
            # Default to user 7176191872 if no AUTO users found
            fire_mode_users = {"7176191872"}
            logger.info("AUTO: Using default user 7176191872")
        
        # Now get EA instances for these users
        if fire_mode_users:
            placeholders = ','.join('?' * len(fire_mode_users))
            cur.execute(f"""
                SELECT u.user_id, e.target_uuid, e.last_equity
                FROM users u
                JOIN ea_instances e ON e.user_id = u.user_id
                WHERE u.user_id IN ({placeholders})
                  AND (strftime('%s','now') - e.last_seen) <= 120
            """, list(fire_mode_users))
            users = cur.fetchall()
        else:
            users = []
        result["auto_users_considered"] = len(users)
        
        for user_row in users:
            user_id = user_row["user_id"]
            target_uuid = user_row["target_uuid"]
            equity = user_row["last_equity"]
            
            try:
                # Skip if no equity
                if not equity or equity <= 0:
                    result["skipped"][user_id] = "no_equity"
                    continue
                
                # Create per-user mission
                mission_id = f"{signal_id}_USER_{user_id}"
                now = int(time.time())
                
                cur.execute("""
                    INSERT OR IGNORE INTO missions
                    (mission_id, signal_id, payload_json, status, expires_at, created_at)
                    VALUES (?, ?, ?, 'PENDING', ?, ?)
                """, (
                    mission_id,
                    signal_id,
                    json.dumps(signal),
                    now + 3600,  # 1 hour expiry
                    now
                ))
                
                # Compute SL/TP absolute prices
                # Pip size resolver
                if symbol.endswith("JPY"):
                    pip = 0.01
                elif symbol == "XAUUSD":
                    pip = 0.1
                else:
                    pip = 0.0001
                
                # Calculate SL/TP based on direction
                if direction == "BUY":
                    sl = entry_price - (stop_pips * pip)
                    tp = entry_price + (target_pips * pip)
                else:  # SELL
                    sl = entry_price + (stop_pips * pip)
                    tp = entry_price - (target_pips * pip)
                
                # Round appropriately
                if symbol.endswith("JPY"):
                    sl = round(sl, 3)
                    tp = round(tp, 3)
                elif symbol == "XAUUSD":
                    sl = round(sl, 2)
                    tp = round(tp, 2)
                else:
                    sl = round(sl, 5)
                    tp = round(tp, 5)
                
                # Get user settings for risk
                cur.execute("SELECT risk_pct_default FROM users WHERE user_id = ?", (user_id,))
                user_settings = cur.fetchone()
                
                # Lot sizing with guardrails
                risk_pct = min(user_settings["risk_pct_default"] if user_settings and user_settings["risk_pct_default"] else 2.0, 3.0)  # Max 3% risk
                risk_amount = equity * (risk_pct / 100)
                
                # Calculate stop distance in points
                stop_distance_points = abs(entry_price - sl)
                pips = stop_distance_points / pip
                
                # Pip value heuristic (simplified)
                if symbol in ["EURUSD", "GBPUSD", "AUDUSD", "NZDUSD"]:
                    pip_value_per_pip_1lot = 10
                elif symbol.endswith("JPY"):
                    pip_value_per_pip_1lot = 9
                elif symbol == "XAUUSD":
                    pip_value_per_pip_1lot = 1
                else:
                    pip_value_per_pip_1lot = 10  # Default for majors
                
                # Calculate lot size
                if pips > 0:
                    lot_est = risk_amount / (pips * pip_value_per_pip_1lot)
                    lot_est = round(lot_est, 2)
                else:
                    lot_est = 0.01
                
                # Apply guardrails
                lot_max = 0.2  # Default max lot size
                lot = max(0.01, min(lot_est, lot_max, 1.0))
                
                # Idempotency check
                idem = f"{signal_id}:{user_id}"
                cur.execute("SELECT fire_id FROM fires WHERE idem = ? LIMIT 1", (idem,))
                if cur.fetchone():
                    result["skipped"][user_id] = "already_fired"
                    continue
                
                # Check for recent pending fires (concurrency guard)
                cur.execute("""
                    SELECT fire_id FROM fires 
                    WHERE user_id = ? 
                      AND status IN ('SENT', 'QUEUED')
                      AND created_at > ?
                    LIMIT 1
                """, (user_id, now - 900))  # 15 minutes
                
                if cur.fetchone():
                    result["skipped"][user_id] = "pending_fire"
                    continue
                
                # Insert fire row
                fire_id = f"fir_{uuid.uuid4().hex[:12]}"
                
                cur.execute("""
                    INSERT INTO fires 
                    (fire_id, mission_id, user_id, status, ticket, price, idem, 
                     created_at, updated_at, equity_used, risk_pct_used)
                    VALUES (?, ?, ?, 'QUEUED', NULL, NULL, ?, ?, ?, ?, ?)
                """, (
                    fire_id,
                    mission_id,
                    user_id,
                    idem,
                    now,
                    now,
                    equity,
                    risk_pct
                ))
                
                # Update mission status to QUEUED
                cur.execute("""
                    UPDATE missions 
                    SET status = 'QUEUED' 
                    WHERE mission_id = ? AND status = 'PENDING'
                """, (mission_id,))
                
                # Enqueue to IPC
                fire_payload = {
                    "type": "fire",
                    "fire_id": fire_id,
                    "target_uuid": target_uuid,
                    "symbol": symbol,
                    "direction": direction,
                    "entry": entry_price,
                    "sl": sl,
                    "tp": tp,
                    "lot": lot
                }
                
                try:
                    enqueue_fire(fire_payload)
                    result["auto_fired"] += 1
                    
                    logger.info(f"AUTO: queued fire", extra={
                        "signal_id": signal_id,
                        "user_id": user_id,
                        "fire_id": fire_id,
                        "mission_id": mission_id,
                        "lot": lot,
                        "sl": sl,
                        "tp": tp
                    })
                except Exception as enq_err:
                    logger.error(f"AUTO: Failed to enqueue for user {user_id}: {enq_err}")
                    # Rollback fire status
                    cur.execute("UPDATE fires SET status = 'FAILED' WHERE fire_id = ?", (fire_id,))
                    result["skipped"][user_id] = "enqueue_failed"
                
            except Exception as user_err:
                logger.error(f"AUTO: Error processing user {user_id}: {user_err}")
                result["skipped"][user_id] = f"error: {str(user_err)}"
                continue
        
        conn.commit()
        conn.close()
        
    except Exception as e:
        logger.error(f"AUTO: Critical error in _auto_fire_for_signal: {e}")
    
    return result

# Initialize onboarding system
try:
    sys.path.append('/root/HydraX-v2/src/bitten_core')
    from onboarding_webapp_system import register_onboarding_system
    onboarding_system_available = True
    logger.info("✅ HydraX Onboarding System imported")
except ImportError as e:
    logger.error(f"❌ Failed to import onboarding system: {e}")
    onboarding_system_available = False

# Lazy import manager
class LazyImports:
    """Manages lazy loading of heavy modules to reduce memory usage"""
    
    def __init__(self):
        self._stripe = None
        self._signal_storage = None
        self._engagement_db = None
        self._mission_api = None
        self._press_pass_api = None
        self._referral_system = None
        self._live_trade_api = None
        self._timer_integration = None
        self._venom_engine = None
    
    @property
    def stripe(self):
        if self._stripe is None:
            import stripe
            self._stripe = stripe
            logger.info("Stripe module loaded")
        return self._stripe
    
    @property
    def signal_storage(self):
        if self._signal_storage is None:
            try:
                from signal_storage import get_latest_signal, get_active_signals, get_signal_by_id
                self._signal_storage = {
                    'get_latest_signal': get_latest_signal,
                    'get_active_signals': get_active_signals,
                    'get_signal_by_id': get_signal_by_id
                }
                logger.info("Signal storage loaded")
            except ImportError as e:
                logger.warning(f"Signal storage not available: {e}")
                self._signal_storage = {}
        return self._signal_storage
    
    @property
    def engagement_db(self):
        if self._engagement_db is None:
            try:
                from engagement_db import handle_fire_action, get_signal_stats, get_user_stats
                self._engagement_db = {
                    'handle_fire_action': handle_fire_action,
                    'get_signal_stats': get_signal_stats,
                    'get_user_stats': get_user_stats
                }
                logger.info("Engagement DB loaded")
            except ImportError as e:
                logger.warning(f"Engagement DB not available: {e}")
                self._engagement_db = {}
        return self._engagement_db
    
    @property
    def referral_system(self):
        if self._referral_system is None:
            try:
                from standalone_referral_system import StandaloneReferralSystem
                self._referral_system = StandaloneReferralSystem()
                logger.info("Referral system loaded")
            except ImportError as e:
                logger.warning(f"Referral system not available: {e}")
                self._referral_system = None
        return self._referral_system
    
    @property
    def venom_engine(self):
        if self._venom_engine is None:
            try:
                from apex_production_live import ApexVenomV7Production
                self._venom_engine = ApexVenomV7Production
                logger.info("VENOM v7.0 Production engine loaded")
            except ImportError as e:
                logger.error(f"VENOM engine load failed: {e}")
                self._venom_engine = None
        return self._venom_engine

# Global lazy imports instance
lazy = LazyImports()

# Create Flask app with optimized config
app = Flask(__name__)
app.config.update({
    'SECRET_KEY': os.getenv('SECRET_KEY', 'bitten-tactical-2025'),
    'MAX_CONTENT_LENGTH': 16 * 1024 * 1024,  # 16MB max upload
    'SEND_FILE_MAX_AGE_DEFAULT': 31536000,   # 1 year cache for static files
})

# Database helper
@contextmanager
def get_bitten_db():
    """Database connection context manager"""
    conn = sqlite3.connect('/root/HydraX-v2/bitten.db')
    conn.row_factory = sqlite3.Row
    try:
        yield conn
    finally:
        conn.close()

# Initialize SocketIO with optimized settings
socketio = SocketIO(
    app, 
    cors_allowed_origins="*",
    async_mode='threading',
    logger=False,  # Disable socketio logging to reduce overhead
    engineio_logger=False
)

# Register onboarding routes
if onboarding_system_available:
    try:
        register_onboarding_system(app)
        logger.info("✅ HydraX Onboarding routes registered")
    except Exception as e:
        logger.error(f"❌ Failed to register onboarding routes: {e}")

# Basic routes with lazy loading
@app.route('/')
def index():
    """Serve the new performance-focused landing page"""
    try:
        with open('/root/HydraX-v2/landing/index_performance.html', 'r') as f:
            return f.read()
    except FileNotFoundError:
        # Fallback to inline template
        return render_template_string("""
        <!DOCTYPE html>
        <html>
        <head>
            <title>BITTEN - Proven Trading Performance | 76.2% Win Rate</title>
            <meta charset="utf-8">
            <meta name="viewport" content="width=device-width, initial-scale=1">
        </head>
        <body>
            <div id="bitten-hud">
                <h1>🎯 BITTEN - PROVEN PERFORMANCE</h1>
                <p>76.2% Win Rate | 7.34 Profit Factor | $425,793 Profit</p>
                <div id="signals-container">
                    {% for signal in signals %}
                    <div class="signal-card">{{ signal }}</div>
                    {% endfor %}
                </div>
            </div>
        </body>
        </html>
        """, signals=signals)
    except Exception as e:
        logger.error(f"Index route error: {e}")
        return "BITTEN HUD - Loading...", 200

@app.route('/healthz')
def healthz():
    """Health check endpoint for monitoring"""
    return jsonify({'status': 'OK', 'service': 'webapp', 'timestamp': time.time()}), 200

@app.route('/api/signals', methods=['GET', 'POST'])
def api_signals():
    """API endpoint for signals - GET retrieves, POST receives from VENOM+CITADEL"""
    if request.method == 'GET':
        try:
            get_signals = lazy.signal_storage.get('get_active_signals')
            if get_signals:
                signals = get_signals()
                return jsonify({'signals': signals, 'count': len(signals)})
            else:
                return jsonify({'error': 'Signal system not available'}), 503
        except Exception as e:
            logger.error(f"Signals API error: {e}")
            return jsonify({'error': 'Signal retrieval failed'}), 500
    
    elif request.method == 'POST':
        # Receive signal from VENOM+CITADEL engine
        try:
            signal_data = request.get_json()
            
            if not signal_data:
                return jsonify({'error': 'No signal data provided'}), 400
            
            # BLACK BOX INTERCEPTION - Log EVERY signal at generation
            try:
                from black_box_complete_truth_system import get_truth_system
                truth_system = get_truth_system()
                signal_data = truth_system.log_signal_generation(signal_data)
                logger.info("🔒 Signal logged to Black Box Complete Truth System")
            except Exception as e:
                logger.error(f"Black Box truth tracking error: {e}")
                # Continue anyway - Black Box failure shouldn't stop signals
            
            # Log the incoming signal
            logger.info(f"📨 Received VENOM+CITADEL signal: {signal_data.get('signal_id')} "
                       f"for {signal_data.get('symbol')} "
                       f"CITADEL: {signal_data.get('citadel_shield', {}).get('score', 0)}/10")
            
            # --- BEGIN: persist signal + ensure template mission ---
            import sqlite3
            import json
            import os
            
            def _db():
                conn = sqlite3.connect(os.environ.get("BITTEN_DB","/root/HydraX-v2/bitten.db"))
                conn.row_factory = sqlite3.Row
                return conn
            
            p = signal_data  # existing validated dict
            now = int(time.time())
            
            conn = _db()
            cur = conn.cursor()
            
            # 1) signals (sl/tp stored as 0, computed at fire time from pips)
            cur.execute("""
            INSERT OR IGNORE INTO signals
            (signal_id, symbol, direction, entry, sl, tp, confidence, payload_json, created_at)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
            """, (
                p.get("signal_id", ""),
                p.get("symbol", p.get("pair", "")),
                p.get("direction", ""),
                float(p.get("entry_price", 0) or 0),
                0,  # sl computed at fire time from stop_pips
                0,  # tp computed at fire time from target_pips  
                float(p.get("confidence", 0) or 0),
                json.dumps(p),  # payload has stop_pips/target_pips
                now
            ))
            
            # 2) template mission (mission_id == signal_id)
            cur.execute("""
            INSERT OR IGNORE INTO missions
            (mission_id, signal_id, payload_json, status, expires_at, created_at)
            VALUES (?, ?, ?, 'PENDING', ?, ?)
            """, (
                p.get("signal_id", ""),
                p.get("signal_id", ""),
                json.dumps(p),
                now + 30*60,  # 30 minutes
                now
            ))
            
            conn.commit()
            conn.close()
            # --- END ---
            
            # Process AUTO mode fires for all eligible users
            try:
                auto_result = _auto_fire_for_signal(signal_data)
                logger.info(f"AUTO mode processing: {auto_result}")
            except Exception as e:
                logger.error(f"AUTO mode error (non-blocking): {e}")
            
            # Import BittenCore if available
            try:
                from src.bitten_core.bitten_core import BittenCore
                core = BittenCore()
                
                # Process the signal through BittenCore
                result = core.process_venom_signal(signal_data)
                
                logger.info(f"✅ Signal processed: {result}")
                return jsonify({'status': 'processed', 'result': result}), 200
                
            except ImportError:
                logger.error("❌ BittenCore not available")
                # Fallback: Just store the signal
                store_signal = lazy.signal_storage.get('store_signal')
                if store_signal:
                    store_signal(signal_data)
                    return jsonify({'status': 'stored'}), 200
                else:
                    return jsonify({'error': 'Cannot process signal'}), 503
                    
        except Exception as e:
            logger.error(f"Signal processing error: {e}")
            return jsonify({'error': str(e)}), 500

@app.route('/api/venom_signals')
def api_venom_signals():
    """Generate live VENOM v7.0 signals"""
    try:
        if lazy.venom_engine is None:
            return jsonify({'error': 'VENOM Engine not available'}), 503
        
        # Initialize VENOM engine
        venom = lazy.venom_engine()
        
        # Connect to MT5
        if not venom.connect_to_mt5():
            return jsonify({'error': 'Failed to connect to MT5'}), 503
        
        try:
            # Scan for signals
            signals = venom.scan_for_signals()
            
            # Format signals for API response
            formatted_signals = []
            for signal in signals:
                formatted_signals.append({
                    'signal_id': signal['signal_id'],
                    'pair': signal['pair'],
                    'signal_type': signal['signal_type'],
                    'confidence': signal['confidence'],
                    'entry_price': signal['entry_price'],
                    'stop_loss_pips': signal['stop_loss_pips'],
                    'take_profit_pips': signal['take_profit_pips'],
                    'risk_reward': signal['risk_reward'],
                    'countdown_minutes': signal['countdown_minutes'],
                    'session': signal['session'],
                    'quality': signal['quality'],
                    'timestamp': signal['timestamp'].isoformat(),
                    'data_source': 'VENOM_v7.0_LIVE'
                })
            
            return jsonify({
                'signals': formatted_signals,
                'count': len(formatted_signals),
                'engine': 'VENOM_v7.0',
                'data_source': 'MT5_LIVE',
                'scan_time': datetime.now().isoformat()
            })
            
        finally:
            venom.disconnect_mt5()
            
    except Exception as e:
        logger.error(f"VENOM signals API error: {e}")
        return jsonify({'error': f'VENOM signal generation failed: {str(e)}'}), 500

def log_hud_access(user_id, mission_id, username=None):
    """Log HUD access for Commander Throne monitoring"""
    try:
        import json
        from datetime import datetime
        
        # Create logs directory if it doesn't exist
        logs_dir = '/root/HydraX-v2/logs'
        os.makedirs(logs_dir, exist_ok=True)
        
        log_entry = {
            "user_id": user_id,
            "username": username or f"User_{user_id}",
            "mission_id": mission_id,
            "timestamp": datetime.now().isoformat(),
            "access_type": "hud_view"
        }
        
        # Append to log file
        with open('/root/HydraX-v2/logs/hud_access.jsonl', 'a') as f:
            f.write(json.dumps(log_entry) + '\n')
            
    except Exception as e:
        print(f"Warning: Could not log HUD access: {e}")

@app.route('/hud')
def mission_briefing():
    """Mission HUD interface for Telegram WebApp links"""
    try:
        # Accept both mission_id and signal (legacy) parameters
        mission_id = request.args.get('mission_id') or request.args.get('signal')
        user_id = request.args.get('user_id')
        
        if not mission_id:
            return render_template('error_hud.html', 
                                 error="Missing mission_id or signal parameter", 
                                 error_code=400), 400
        
        # Log HUD access for Commander Throne monitoring
        if user_id and mission_id:
            log_hud_access(user_id, mission_id)
        
        # Optional: Log HUD load attempts for debugging
        client_ip = request.environ.get('HTTP_X_FORWARDED_FOR', request.remote_addr)
        logger.info(f"HUD load attempt: mission_id={mission_id}, user_id={user_id}, ip={client_ip}")
        
        # Load user registry for real user data overlay
        user_registry_data = {}
        user_stats = {}
        if user_id:
            try:
                with open('/root/HydraX-v2/user_registry.json', 'r') as f:
                    registry = json.load(f)
                    # Check both root and users section
                    if user_id in registry:
                        user_registry_data = registry[user_id]
                    elif 'users' in registry and user_id in registry['users']:
                        user_registry_data = registry['users'][user_id]
                    
                    # Extract key stats
                    user_stats = {
                        'tier': user_registry_data.get('tier', 'NIBBLER'),
                        'balance': user_registry_data.get('account_balance', 10000.0),
                        'equity': user_registry_data.get('account_equity', 10000.0),
                        'win_rate': 68.5,  # TODO: Get from actual trade history
                        'total_pnl': 850.47 - 10000,  # Current balance - starting balance
                        'trades_remaining': 5 if user_registry_data.get('tier') == 'NIBBLER' else 10
                    }
                    logger.info(f"Loaded user data for {user_id}: tier={user_stats['tier']}, balance=${user_stats['balance']}")
            except Exception as e:
                logger.warning(f"Could not load user data for {user_id}: {e}")
                user_stats = {
                    'tier': 'NIBBLER',
                    'balance': 10000.0,
                    'equity': 10000.0,
                    'win_rate': 0,
                    'total_pnl': 0,
                    'trades_remaining': 5
                }
        
        # Use static file loading for now
        mission_paths = [
            f"./missions/mission_{mission_id}.json",  # Preferred format
            f"./missions/{mission_id}.json"           # Fallback format
        ]
        
        mission_file = None
        mission_data = None
        
        for path in mission_paths:
            if os.path.exists(path):
                mission_file = path
                break
        
        if not mission_file:
            logger.warning(f"Mission file not found for mission_id: {mission_id}")
            return render_template('error_hud.html', 
                                 error=f"Mission {mission_id} not found", 
                                 error_code=404), 404
        
        try:
            with open(mission_file, 'r') as f:
                mission_data = json.load(f)
        except json.JSONDecodeError as e:
            logger.error(f"Invalid JSON in mission file {mission_file}: {e}")
            return render_template('error_hud.html', 
                                 error=f"Mission {mission_id} has invalid data format", 
                                 error_code=500), 500
        except IOError as e:
            logger.error(f"Cannot read mission file {mission_file}: {e}")
            return render_template('error_hud.html', 
                                 error=f"Cannot load mission {mission_id}", 
                                 error_code=500), 500
        
        # Calculate time remaining (default to 1 hour if no timing data)
        from datetime import datetime
        try:
            expires_at = datetime.fromisoformat(mission_data['timing']['expires_at'])
            time_remaining = max(0, int((expires_at - datetime.now()).total_seconds()))
        except:
            # Default to 1 hour expiry for new missions
            time_remaining = 3600
        
        logger.info(f"Mission {mission_id} loaded: {mission_data.keys()}")
        
        # Handle different mission data structures
        # Current VENOM structure vs legacy structure
        signal = mission_data.get('signal', {})
        enhanced_signal = mission_data.get('enhanced_signal', {})
        mission = mission_data.get('mission', {})
        user_data = mission_data.get('user', {})
        user_id = mission_data.get('user_id', 'unknown')
        
        # Use enhanced_signal data if available (current VENOM format)
        if enhanced_signal:
            signal_data = enhanced_signal
            logger.info(f"Using enhanced_signal data for {mission_id}")
        else:
            signal_data = signal
            logger.info(f"Using signal data for {mission_id}")
        
        # Fallback to root level data
        symbol = signal_data.get('symbol') or mission_data.get('pair', 'UNKNOWN')
        direction = signal_data.get('direction') or mission_data.get('direction', 'BUY')
        entry_price = signal_data.get('entry_price', 0)
        stop_loss = signal_data.get('stop_loss', 0)
        take_profit = signal_data.get('take_profit', 0)
        
        # CITADEL shield data
        citadel_shield = mission_data.get('citadel_shield', {})
        citadel_score = citadel_shield.get('score', mission_data.get('confidence', 75))
        
        # Validate required fields
        missing_fields = []
        if not symbol or symbol == 'UNKNOWN':
            missing_fields.append('symbol')
        if not direction:
            missing_fields.append('direction')
        if not entry_price:
            missing_fields.append('entry_price')
        
        logger.info(f"Mission {mission_id} fields: symbol={symbol}, direction={direction}, entry={entry_price}, missing={missing_fields}")
        
        # Prepare template variables for new_hud_template.html
        template_vars = {
            # Basic signal info
            'symbol': symbol,
            'direction': direction,
            'entry_price': entry_price,
            'stop_loss': stop_loss,
            'take_profit': take_profit,
            'entry_masked': f"{float(entry_price):.5f}" if entry_price else "Loading...",
            'sl_masked': f"{float(stop_loss):.5f}" if stop_loss else "Loading...",
            'tp_masked': f"{float(take_profit):.5f}" if take_profit else "Loading...",
            
            # Quality scores
            'tcs_score': signal_data.get('confidence', mission_data.get('confidence', 75)),
            'citadel_score': citadel_score,
            'ml_filter_passed': mission_data.get('ml_filter', {}).get('filter_result') != 'prediction_failed',
            
            # Risk calculation with user overlay
            'rr_ratio': signal_data.get('risk_reward_ratio', signal_data.get('risk_reward', 2.0)),
            'account_balance': user_stats.get('balance', user_data.get('balance', 10000.0)),
            'sl_dollars': f"{user_stats.get('balance', 10000.0) * 0.02:.2f}",  # 2% risk
            'tp_dollars': f"{user_stats.get('balance', 10000.0) * 0.04:.2f}",  # 2:1 R:R
            
            # Mission info
            'mission_id': mission_id,
            'signal_id': mission_data.get('signal_id', mission_id),
            'user_id': user_id,
            'expiry_seconds': time_remaining,
            'time_remaining': time_remaining,  # Add for countdown timer
            
            # User stats with real overlay data
            'user_stats': user_stats,  # Use the loaded user stats from registry
            
            # Calculate position size based on user tier
            'position_size': 0.01 * (2 if user_stats['tier'] == 'COMMANDER' else 1),
            
            # Warning for missing fields
            'missing_fields': missing_fields,
            'has_warnings': len(missing_fields) > 0,
            
            # CITADEL shield info
            'citadel_classification': citadel_shield.get('classification', 'SHIELD_ACTIVE'),
            'citadel_explanation': citadel_shield.get('explanation', 'Signal analysis in progress')
        }
        
        # Load and render the new HUD template
        # Use comprehensive template for enhanced experience
        if os.path.exists('templates/comprehensive_mission_briefing.html'):
            return render_template('comprehensive_mission_briefing.html', **template_vars)
        else:
            return render_template('new_hud_template.html', **template_vars)
        
    except Exception as e:
        # Enhanced error logging with mission_id context
        logger.error(f"Mission HUD error for mission_id='{mission_id}': {e}", exc_info=True)
        
        # Enhanced error handling with fallback HUD  
        try:
            return render_template('error_hud.html', 
                                 error=f"Error loading mission {mission_id}: {str(e)}", 
                                 error_code=500), 500
        except Exception as template_error:
            # Last resort: plain text error if even error template fails
            logger.error(f"Error template also failed: {template_error}")
            return f"Error loading mission {mission_id}: {str(e)}", 500

@app.route('/notebook/<user_id>')
def normans_notebook(user_id):
    """Norman's Notebook - Simple working version"""
    return f"""
    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Norman's Notebook - User {user_id}</title>
        <style>
            body {{ 
                background: #0f1419; 
                color: #00ff41; 
                font-family: 'Courier New', monospace; 
                margin: 0; 
                padding: 20px; 
            }}
            .container {{ 
                max-width: 800px; 
                margin: 0 auto; 
                background: rgba(0,255,65,0.05); 
                border: 1px solid #00ff41; 
                border-radius: 8px; 
                padding: 20px; 
            }}
            h1 {{ text-align: center; color: #d4af37; }}
            .stats {{ 
                display: flex; 
                justify-content: space-around; 
                margin: 20px 0; 
                padding: 15px; 
                background: rgba(0,0,0,0.3); 
                border-radius: 6px; 
            }}
            .stat {{ text-align: center; }}
            .stat-value {{ font-size: 1.5em; font-weight: bold; color: #d4af37; }}
            button {{ 
                background: linear-gradient(135deg, #00ff41, #32cd32); 
                color: #000; 
                border: none; 
                padding: 10px 20px; 
                border-radius: 4px; 
                cursor: pointer; 
                font-weight: bold; 
            }}
        </style>
    </head>
    <body>
        <div class="container">
            <h1>📓 Norman's Notebook</h1>
            <p style="text-align: center; color: #888;">Trading Journal for User {user_id}</p>
            
            <div class="stats">
                <div class="stat">
                    <div class="stat-value">0</div>
                    <div>Total Entries</div>
                </div>
                <div class="stat">
                    <div class="stat-value">250</div>
                    <div>XP Earned</div>
                </div>
                <div class="stat">
                    <div class="stat-value">Focused</div>
                    <div>Current Mood</div>
                </div>
                <div class="stat">
                    <div class="stat-value">3</div>
                    <div>Day Streak</div>
                </div>
            </div>
            
            <div style="margin-top: 30px; text-align: center; color: #666;">
                <p>📝 Trading journal coming soon!</p>
                <p><em>"Every trade tells a story. Make yours count."</em> - Norman</p>
                <p><a href="javascript:window.close()" style="color: #00ff41;">← Close Window</a></p>
            </div>
        </div>
    </body>
    </html>
    """


@app.route('/notebook/<user_id>/add-entry', methods=['POST'])
def add_notebook_entry(user_id):
    """Add a new entry to Norman's Notebook with XP integration"""
    try:
        from src.bitten_core.notebook_xp_integration import create_notebook_xp_integration
        
        # Get form data
        symbol = request.form.get('symbol', '').strip()
        content = request.form.get('content', '').strip()
        mood = request.form.get('mood', 'neutral')
        signal_id = request.args.get('signal_id', '').strip()
        template = request.args.get('template', 'basic')
        
        if not content:
            return redirect(f'/notebook/{user_id}?error=content_required')
        
        # Initialize notebook XP integration
        notebook_integration = create_notebook_xp_integration(user_id)
        
        # Determine entry type and XP reward
        entry_type = "basic"
        linked_signal_id = None
        trade_result = None
        
        if signal_id:
            entry_type = "signal_paired"
            linked_signal_id = signal_id
            # Try to determine trade result from recent signals
            recent_signals = notebook_integration.get_recent_executed_signals(days=1)
            for signal in recent_signals:
                if signal.signal_id == signal_id:
                    trade_result = signal.result
                    break
        elif template in ['trade_plan', 'trade_review', 'success_review', 'lesson_learned']:
            entry_type = "structured_template"
        elif 'weekly review' in content.lower() or 'week review' in content.lower():
            entry_type = "weekly_review"
        
        # Generate appropriate title
        if symbol:
            if entry_type == "signal_paired":
                title = f"Trade Reflection - {symbol}"
            elif entry_type == "structured_template":
                title = f"Analysis - {symbol}"
            else:
                title = f"Notes - {symbol}"
        else:
            if entry_type == "weekly_review":
                title = f"Weekly Review - {datetime.now().strftime('%Y-%m-%d')}"
            else:
                title = f"Trading Journal - {datetime.now().strftime('%Y-%m-%d')}"
        
        # Add entry with XP integration
        result = notebook_integration.add_journal_entry_with_xp(
            title=title,
            content=content,
            category="trade_analysis" if symbol else "general",
            entry_type=entry_type,
            linked_signal_id=linked_signal_id,
            trade_result=trade_result,
            confidence=None
        )
        
        # Check for milestone achievement and prepare success message
        success_params = [f'entry_added', f'xp_earned={result["xp_earned"]}']
        if result.get('milestone_achieved'):
            milestone = result['milestone_achieved']['milestone']
            success_params.append(f'milestone={milestone.name}')
            success_params.append(f'milestone_xp={result["milestone_achieved"]["xp_awarded"]}')
        
        return redirect(f'/notebook/{user_id}?success=' + '&'.join(success_params))
        
    except Exception as e:
        logger.error(f"Add notebook entry error: {e}")
        return redirect(f'/notebook/{user_id}?error=add_failed')

@app.route('/brief')
def brief_mission():
    """Create per-user mission when clicking from Telegram"""
    try:
        signal_id = request.args.get('signal_id')
        # Get user_id from multiple sources
        user_id = request.args.get('uid') or request.args.get('user_id')
        
        # If no user_id in URL, try to get from headers
        if not user_id:
            user_id = request.headers.get('X-User-Id')
        
        # If no user_id in URL, try to get from session/cookie
        if not user_id:
            user_id = request.cookies.get('user_id')
        
        # If still no user_id, try Telegram WebApp data
        if not user_id:
            tg_data = request.args.get('tgWebAppData')
            if tg_data:
                try:
                    import base64
                    decoded = json.loads(base64.b64decode(tg_data))
                    user_id = str(decoded.get('user', {}).get('id'))
                except:
                    pass
        
        # TODO: Replace with signed token validation
        if not user_id:
            return jsonify({'error': 'Authentication required', 'upgrade_url': '/connect'}), 403
        
        if not signal_id:
            return jsonify({'error': 'No signal_id provided'}), 400
            
        # Create or find mission for this user+signal
        DB_PATH = os.environ.get("BITTEN_DB", "/root/HydraX-v2/bitten.db")
        mission_id = _bitten_get_or_create_mission(DB_PATH, user_id, signal_id)
        
        if not mission_id:
            return jsonify({'error': f'Signal {signal_id} not found'}), 404
            
        # Load mission data from database
        with get_bitten_db() as conn:
            mission_row = conn.execute(
                'SELECT * FROM missions WHERE mission_id = ?',
                (mission_id,)
            ).fetchone()
            
            if not mission_row:
                return jsonify({'error': 'Mission creation failed'}), 500
                
            payload_json = mission_row['payload_json']
            signal_data = json.loads(payload_json) if payload_json else {}
            
        # Helper function for pip size
        def pip_size(symbol):
            s = symbol.upper()
            if s.endswith("JPY"): return 0.01
            if s.startswith("XAU"): return 0.1
            if s.startswith("XAG"): return 0.01
            return 0.0001
            
        # Calculate absolute SL/TP from pips
        signal = signal_data.get('signal', signal_data)
        sym = signal.get('symbol', '').upper()
        side = signal.get('direction', '').upper()
        entry = float(signal.get('entry_price') or 0)
        stop_pips = float(signal.get('stop_pips') or signal.get('sl_pips') or 10)
        target_pips = float(signal.get('target_pips') or signal.get('tp_pips') or 15)
        
        if entry > 0 and sym and side:
            pip = pip_size(sym)
            if side == "BUY":
                sl = entry - (stop_pips * pip) if stop_pips > 0 else 0
                tp = entry + (target_pips * pip) if target_pips > 0 else 0
            elif side == "SELL":
                sl = entry + (stop_pips * pip) if stop_pips > 0 else 0
                tp = entry - (target_pips * pip) if target_pips > 0 else 0
            else:
                sl = tp = 0
                
            # Add absolute levels to signal data
            signal['sl'] = round(sl, 6)
            signal['tp'] = round(tp, 6)
            if 'signal' in signal_data:
                signal_data['signal'] = signal
        
        # Get live balance for user
        balance, equity = _bitten_get_live_balance(DB_PATH, user_id=user_id)
        
        # Extract pattern classification data
        pattern_class = signal.get('pattern_class', 'RAPID')
        target_rr = signal.get('target_rr')
        expected_hold_min = signal.get('expected_hold_min')
        
        # Compute RR if missing
        if target_rr is None:
            entry = float(signal.get('entry_price') or 0)
            stop_pips = float(signal.get('stop_pips') or signal.get('sl_pips') or 10)
            target_pips = float(signal.get('target_pips') or signal.get('tp_pips') or 15)
            if stop_pips > 0:
                target_rr = round(target_pips / stop_pips, 2)
            else:
                target_rr = '?'
        
        # Default expected hold if missing
        if expected_hold_min is None:
            expected_hold_min = 90 if pattern_class == 'SNIPER' else 30
        
        # Determine class color and icon
        if pattern_class == 'SNIPER':
            class_color = '#ff0066'
            class_icon = '🎯'
        else:
            class_color = '#00ffcc'
            class_icon = '⚡'
        
        # Render brief with FIRE button
        brief_html = f'''
        <!DOCTYPE html>
        <html>
        <head>
            <title>BITTEN Mission Brief</title>
            <meta name="viewport" content="width=device-width, initial-scale=1">
            <style>
                body {{ background: #0a0a0a; color: #0ff; font-family: monospace; padding: 20px; }}
                .mission {{ background: #111; border: 1px solid #0ff; padding: 20px; margin: 20px 0; }}
                .signal-info {{ margin: 10px 0; }}
                .balance {{ color: #0f0; font-size: 1.2em; }}
                .fire-btn {{ background: #f00; color: #fff; border: none; padding: 15px 40px; 
                           font-size: 1.5em; cursor: pointer; margin: 20px 0; }}
                .fire-btn:hover {{ background: #ff3333; }}
                .class-chip {{ display: inline-block; background: {class_color}; color: #000; 
                              padding: 5px 15px; border-radius: 20px; font-weight: bold; margin: 10px 0; }}
                .rr-info {{ color: #ffcc00; font-size: 1.1em; margin: 10px 0; }}
            </style>
        </head>
        <body>
            <h1>📡 BITTEN MISSION BRIEF</h1>
            <div class="mission">
                <div class="class-chip">{class_icon} {pattern_class}</div>
                <div class="rr-info">RR≈{target_rr} • est. {expected_hold_min} min</div>
                <div class="signal-info">
                    <strong>Symbol:</strong> {signal.get('symbol', 'N/A')}<br>
                    <strong>Direction:</strong> {signal.get('direction', 'N/A')}<br>
                    <strong>Entry:</strong> {signal.get('entry_price', 'N/A')}<br>
                    <strong>Stop Loss:</strong> {signal.get('sl', 'N/A')} ({signal.get('stop_pips', 'N/A')} pips)<br>
                    <strong>Take Profit:</strong> {signal.get('tp', 'N/A')} ({signal.get('target_pips', 'N/A')} pips)<br>
                    <strong>Pattern:</strong> {signal.get('pattern_type', 'N/A')}<br>
                    <strong>Confidence:</strong> {signal.get('confidence', 'N/A')}%
                </div>
                <div class="balance">
                    Live Balance: ${balance:.2f}<br>
                    Live Equity: ${equity:.2f}
                </div>
                <button class="fire-btn" onclick="executeFire()">🔥 FIRE</button>
            </div>
            <script>
                function executeFire() {{
                    fetch('/api/fire', {{
                        method: 'POST',
                        headers: {{'Content-Type': 'application/json'}},
                        body: JSON.stringify({{
                            mission_id: '{mission_id}',
                            signal_id: '{signal_id}',
                            user_id: '{user_id}',
                            dry_run: 0
                        }})
                    }})
                    .then(r => r.json())
                    .then(data => {{
                        if (data.ok) alert('✅ FIRE command sent!');
                        else alert('❌ Error: ' + (data.error || 'Unknown'));
                    }})
                    .catch(e => alert('❌ Network error: ' + e));
                }}
            </script>
        </body>
        </html>
        '''
        
        return brief_html, 200
        
    except Exception as e:
        logger.error(f"Brief endpoint error: {e}")
        return jsonify({'error': str(e)}), 500

@app.route('/api/mission_from_signal', methods=['POST'])
def api_mission_from_signal():
    """Create mission from signal for authenticated user"""
    try:
        data = request.get_json() or {}
        signal_id = data.get('signal_id')
        
        # Get user_id from multiple sources
        user_id = data.get('user_id') or request.headers.get('X-User-Id')
        
        # TODO: Replace with proper auth
        if not user_id:
            return jsonify({'error': 'Authentication required', 'upgrade_url': '/connect'}), 403
            
        if not signal_id:
            return jsonify({'error': 'signal_id required'}), 400
            
        # Create or find mission
        DB_PATH = os.environ.get("BITTEN_DB", "/root/HydraX-v2/bitten.db")
        mission_id = _bitten_get_or_create_mission(DB_PATH, user_id, signal_id)
        
        if not mission_id:
            return jsonify({'error': f'Signal {signal_id} not found'}), 404
            
        return jsonify({
            'ok': True,
            'mission_id': mission_id,
            'signal_id': signal_id
        })
        
    except Exception as e:
        logger.error(f"API mission_from_signal error: {e}")
        return jsonify({'error': str(e)}), 500

@app.route('/api/fire', methods=['POST'])
def fire_mission():
    # --- SERVER-SIDE FIRE MAPPING (NO CLIENT user_id REQUIRED) ---
    try:
        # Accept JSON body from request context
        _req = request.get_json() if request.method == 'POST' else None
    except Exception:
        _req = None
    if _req is None:
        _req = {}
    
    # Derive user_id from ea_instances by target_uuid if missing/empty
    tgt = _req.get("target_uuid")
    if not tgt:
        return jsonify({"ok":False,"error":"target_uuid required"}), 400
    
    uid = _req.get("user_id")
    if not uid:
        from pathlib import Path
        import os as _os_db
        DB_PATH = _os_db.environ.get("BITTEN_DB", str(Path(__file__).resolve().parent / "bitten.db"))
        uid, freshness = _bitten_resolve_user_and_check_fresh(DB_PATH, tgt, freshness_sec=180)
        if not uid:
            return jsonify({"ok":False,"error":"mapping_not_found","target_uuid":tgt}), 400
        _req["user_id"] = uid
        if isinstance(freshness,str) and freshness.startswith("stale"):
            return jsonify({"ok":False,"error":"ea_stale","details":freshness,"target_uuid":tgt}), 409
    
    # Add idempotency key if missing
    if not _req.get("idem"):
        import time
        _req["idem"] = f"{_req.get('fire_id','') or 'fire'}:{_req['user_id']}:{_req['symbol']}:{int(time.time())}"
    
    # --- FIRE SHADOW PUBLISH (Redis Streams) ---
    try:
        import os as _os_shadow
        if _os_shadow.environ.get("FIRE_TO_REDIS","1") == "1":
            stream = f"fire.{_req['target_uuid']}"
            _bitten_fire_xadd(_os_shadow.environ.get("REDIS_HOST","127.0.0.1"), _os_shadow.environ.get("REDIS_PORT","6379"), stream, _req)
    except Exception as _e:
        try: print("fire shadow publish err:", _e, flush=True)
        except: pass
    # --- END FIRE SHADOW PUBLISH ---
    
    # Optional: dry_run support to allow health checks without trading
    if _req.get("dry_run") is True:
        return jsonify({"ok":True,"dry_run":True,"user_id":_req["user_id"],"target_uuid":tgt,"idem":_req["idem"]}), 200
    
    # Use _req for the zmq send
    data = _req
    # --- END SERVER-SIDE FIRE MAPPING ---
    
    """Fire a mission - execute trade"""
    try:
        # Get request data from JSON body
        data = request.get_json(force=True, silent=True) or {}
        user_id = str(data.get("user_id", "")).strip()
        mission_id = str(data.get("mission_id", "")).strip()
        
        logger.info(f"🔫 Fire request: mission_id={mission_id}, user_id={user_id}")
        
        if not user_id:
            return jsonify({"error": "user_id required"}), 400
        if not mission_id:
            return jsonify({"error": "mission_id required"}), 400
        
        # Database connection
        import sqlite3
        import hashlib
        def _db():
            conn = sqlite3.connect(os.environ.get("BITTEN_DB", "/root/HydraX-v2/bitten.db"))
            conn.row_factory = sqlite3.Row
            return conn
        
        conn = _db()
        cur = conn.cursor()
        now = int(time.time())
        
        # Check EA freshness
        fresh = cur.execute("""
            SELECT 1 FROM ea_instances
            WHERE user_id=? AND (? - last_seen) <= 120
            LIMIT 1
        """, (user_id, now)).fetchone()
        
        if not fresh:
            conn.close()
            return jsonify({"error": "EA not linked or stale"}), 409
        
        # Idempotency check (5 min)
        idem_hash = hashlib.md5(f"{mission_id}:{user_id}".encode()).hexdigest()
        recent = cur.execute("""
            SELECT 1 FROM fires
            WHERE mission_id=? AND user_id=? AND created_at > ?
            LIMIT 1
        """, (mission_id, user_id, now - 300)).fetchone()
        
        if recent:
            conn.close()
            return jsonify({"error": "Duplicate fire within 5 minutes"}), 409
        
        # Load mission from database
        mission = cur.execute("""
            SELECT mission_id, signal_id, payload_json, status, expires_at
            FROM missions WHERE mission_id=?
        """, (mission_id,)).fetchone()
        
        if not mission:
            conn.close()
            return jsonify({'error': 'Mission not found'}), 404
        
        # Check expiry
        if mission['expires_at'] and mission['expires_at'] < now:
            conn.close()
            return jsonify({'error': 'Mission expired'}), 410
        
        mission_data = json.loads(mission['payload_json']) if mission['payload_json'] else {}
        
        # Extract core data
        symbol = mission_data.get('symbol', mission_data.get('pair', 'EURUSD'))
        direction = mission_data.get('direction', 'BUY')
        entry_price = float(mission_data.get('entry_price', 0) or 0)
        stop_pips = float(mission_data.get('stop_pips', mission_data.get('stop_loss_pips', 0)) or 0)
        target_pips = float(mission_data.get('target_pips', mission_data.get('take_profit_pips', 0)) or 0)
        
        # SL/TP calculation from pips
        def _pip_size(symbol, digits=5):
            s = symbol.upper()
            if "JPY" in s: return 0.01
            if s.startswith("XAU"): return 0.1
            return 0.0001 if digits >= 4 else 0.01
        
        pip = _pip_size(symbol)
        
        if direction.upper() == "BUY":
            sl = entry_price - stop_pips * pip if stop_pips else 0
            tp = entry_price + target_pips * pip if target_pips else 0
        else:
            sl = entry_price + stop_pips * pip if stop_pips else 0
            tp = entry_price - target_pips * pip if target_pips else 0
        
        # Generate fire_id
        fire_id = f"FIRE_{mission_id}_{user_id}_{now}"
        
        # Insert fire record (only columns that exist in schema)
        cur.execute("""
            INSERT INTO fires (fire_id, mission_id, user_id, status, created_at)
            VALUES (?, ?, ?, 'SENT', ?)
        """, (fire_id, mission_id, user_id, now))
        
        conn.commit()
        
        # Enqueue to IPC
        try:
            fire_payload = {
                'type': 'fire',
                'fire_id': fire_id,
                'mission_id': mission_id,
                'user_id': str(user_id),
                'symbol': symbol,
                'direction': direction,
                'entry': entry_price,
                'sl': sl,
                'tp': tp,
                'lot': 0.01,
                'target_uuid': f'COMMANDER_{user_id}'
            }
            
            # FOMO: Tier gate by pattern_class
            _dbp = os.environ.get('BITTEN_DB','/root/HydraX-v2/bitten.db')
            _user_tier = _bitten_user_tier(_dbp, user_id)
            _sig_class = _bitten_signal_class_from_id(_dbp, signal_id if 'signal_id' in locals() else mission.get('signal_id'))
            if not _bitten_can_fire(_user_tier, _sig_class):
                cur.execute("UPDATE fires SET status='REJECTED' WHERE fire_id=?", (fire_id,))
                conn.commit()
                conn.close()
                return jsonify({'ok': False, 'upgrade_required': True, 'pattern_class': _sig_class,
                               'message': f'Upgrade to PRO+ to fire {_sig_class} signals.',
                               'upgrade_url': os.environ.get('UPGRADE_URL_BASE','https://yourdomain/upgrade')}), 403
            
            enqueue_fire(fire_payload)
            
        except Exception as e:
            cur.execute("UPDATE fires SET status='FAILED' WHERE fire_id=?", (fire_id,))
            conn.commit()
            conn.close()
            logger.error(f"❌ Failed to enqueue: {e}")
            return jsonify({'error': 'enqueue_failed'}), 500
        
        conn.close()
        return jsonify({'fire_id': fire_id, 'status': 'QUEUED'}), 202
    
    except Exception as e:
        logger.error(f"Fire endpoint error: {e}")
        return jsonify({'error': str(e)}), 500

@app.route('/api/ping', methods=['POST'])
def ping_bridge():
    """Ping MT5 bridge and capture account info"""
    try:
        # Get user ID from headers
        user_id = request.headers.get('X-User-ID')
        
        if not user_id:
            return jsonify({'error': 'Missing user ID', 'success': False}), 400
        
        # Import fire router
        import sys
        sys.path.append('/root/HydraX-v2/src/bitten_core')
        from fire_router import get_fire_router
        
        # Ping bridge and capture account info
        fire_router = get_fire_router()
        ping_result = fire_router.ping_bridge(user_id)
        
        if ping_result.get('status') == 'online':
            return jsonify({
                'success': True,
                'message': 'Bridge ping successful',
                'account_info': ping_result.get('account_info'),
                'broker': ping_result.get('broker'),
                'balance': ping_result.get('balance'),
                'equity': ping_result.get('equity'),
                'leverage': ping_result.get('leverage'),
                'timestamp': datetime.now().isoformat()
            })
        else:
            return jsonify({
                'success': False,
                'message': ping_result.get('message', 'Bridge ping failed'),
                'status': ping_result.get('status'),
                'timestamp': datetime.now().isoformat()
            }), 503
            
    except Exception as e:
        logger.error(f"Bridge ping error: {e}")
        return jsonify({
            'error': f'Bridge ping failed: {str(e)}',
            'success': False
        }), 500

@app.route('/api/account', methods=['GET'])
def get_account_info():
    """Get user's account information"""
    try:
        # Get user ID from headers
        user_id = request.headers.get('X-User-ID')
        
        if not user_id:
            return jsonify({'error': 'Missing user ID', 'success': False}), 400
        
        # Import account manager
        import sys
        sys.path.append('/root/HydraX-v2/src/bitten_core')
        from user_account_manager import get_account_manager
        
        # Get account info
        account_manager = get_account_manager()
        account_info = account_manager.get_user_account_info(user_id)
        
        if account_info:
            return jsonify({
                'success': True,
                'account_info': account_info,
                'timestamp': datetime.now().isoformat()
            })
        else:
            return jsonify({
                'success': False,
                'message': 'No account information found',
                'timestamp': datetime.now().isoformat()
            }), 404
            
    except Exception as e:
        logger.error(f"Get account info error: {e}")
        return jsonify({
            'error': f'Failed to get account info: {str(e)}',
            'success': False
        }), 500

@app.route('/src/ui/<path:filename>')
def serve_ui_files(filename):
    """Serve UI JavaScript and CSS files"""
    try:
        from flask import send_from_directory
        return send_from_directory('src/ui', filename)
    except Exception as e:
        logger.error(f"Error serving UI file {filename}: {e}")
        return "File not found", 404

@app.route('/api/health')
def health_check():
    """Lightweight health check"""
    return jsonify({
        'status': 'operational',
        'timestamp': datetime.now().isoformat(),
        'version': '2.1',
        'memory_optimized': True
    })

@app.route('/api/run_apex_backtest', methods=['POST'])
def run_apex_backtest():
    """Run 6.0 Enhanced backtest"""
    try:
        # Get configuration from request
        config = request.get_json()
        
        if not config:
            return jsonify({'error': 'No configuration provided'}), 400
        
        # Import and run backtester
        try:
            from apex_backtester_api import run_apex_backtest as run_backtest
            result = run_backtest(config)
            
            if result.get('success'):
                return jsonify({'success': True, 'results': result['results']})
            else:
                return jsonify({'error': result.get('error', 'Unknown error')}), 500
                
        except ImportError as e:
            logger.error(f"Failed to import backtester: {e}")
            return jsonify({'error': 'backtester not available'}), 500
            
        except Exception as e:
            logger.error(f"Backtest execution failed: {e}")
            return jsonify({'error': f'Backtest failed: {str(e)}'}), 500
    
    except Exception as e:
        logger.error(f"API error: {e}")
        return jsonify({'error': 'Internal server error'}), 500

@app.route('/backtester')
def backtester_page():
    """Serve the backtester page"""
    try:
        with open('webapp/templates/apex_backtester.html', 'r') as f:
            return f.read()
    except FileNotFoundError:
        return "Backtester page not found", 404
    except Exception as e:
        logger.error(f"Error serving backtester page: {e}")
        return "Error loading backtester", 500

# SocketIO events with lazy loading
@socketio.on('connect')
def handle_connect():
    """Handle client connections"""
    logger.info(f"Client connected: {request.sid}")
    socketio.emit('status', {'connected': True, 'server': 'BITTEN-OPTIMIZED'})

@socketio.on('get_signals')
def handle_get_signals():
    """Handle signal requests via WebSocket"""
    try:
        get_signals = lazy.signal_storage.get('get_active_signals')
        if get_signals:
            signals = get_signals()
            socketio.emit('signals_update', {'signals': signals})
        else:
            socketio.emit('error', {'message': 'Signal system unavailable'})
    except Exception as e:
        logger.error(f"WebSocket signals error: {e}")
        socketio.emit('error', {'message': 'Signal retrieval failed'})

# Lazy load additional modules on demand
def load_mission_api():
    """Load mission API only when needed"""
    try:
        from src.api.mission_endpoints import register_mission_api
        register_mission_api(app)
        logger.info("Mission API loaded and registered")
        return True
    except ImportError as e:
        logger.warning(f"Mission API not available: {e}")
        return False

def load_press_pass_api():
    """Load press pass API only when needed"""
    try:
        from src.api.press_pass_provisioning import register_press_pass_api
        register_press_pass_api(app)
        logger.info("Press Pass API loaded and registered")
        return True
    except ImportError as e:
        logger.warning(f"Press Pass API not available: {e}")
        return False

def load_payment_system():
    """Load Stripe payment system only when needed"""
    try:
        stripe = lazy.stripe
        stripe.api_key = os.getenv('STRIPE_SECRET_KEY')
        logger.info("Payment system initialized")
        return True
    except Exception as e:
        logger.warning(f"Payment system not available: {e}")
        return False

# Route to trigger module loading
@app.route('/api/load/<module_name>')
def load_module(module_name):
    """Dynamically load modules on demand"""
    module_loaders = {
        'mission': load_mission_api,
        'press_pass': load_press_pass_api,
        'payments': load_payment_system
    }
    
    loader = module_loaders.get(module_name)
    if loader:
        success = loader()
        return jsonify({
            'module': module_name,
            'loaded': success,
            'timestamp': datetime.now().isoformat()
        })
    else:
        return jsonify({'error': f'Unknown module: {module_name}'}), 400

# Error handlers
@app.errorhandler(404)
def not_found(error):
    return jsonify({'error': 'Endpoint not found'}), 404

@app.errorhandler(500)
def internal_error(error):
    logger.error(f"Internal server error: {error}")
    return jsonify({'error': 'Internal server error'}), 500

# Development/Debug routes
if os.getenv('FLASK_ENV') == 'development':
    @app.route('/debug/memory')
    def debug_memory():
        """Debug endpoint to check memory usage"""
        import psutil
        process = psutil.Process()
        memory_info = process.memory_info()
        
        return jsonify({
            'memory_rss': f"{memory_info.rss / 1024 / 1024:.1f} MB",
            'memory_vms': f"{memory_info.vms / 1024 / 1024:.1f} MB",
            'cpu_percent': process.cpu_percent(),
            'loaded_modules': {
                'stripe': lazy._stripe is not None,
                'signal_storage': lazy._signal_storage is not None,
                'engagement_db': lazy._engagement_db is not None,
                'referral_system': lazy._referral_system is not None
            }
        })

# Credit Referral Admin API Integration
try:
    from src.bitten_core.credit_admin_api import register_credit_admin_blueprint
    register_credit_admin_blueprint(app)
    logger.info("Credit referral admin API registered successfully")
except ImportError as e:
    logger.warning(f"Credit referral admin API not available: {e}")
except Exception as e:
    logger.error(f"Failed to register credit referral admin API: {e}")

# Stripe Webhook Integration for Credit System
try:
    from src.bitten_core.stripe_webhook_handler import stripe_webhook_bp
    app.register_blueprint(stripe_webhook_bp, url_prefix='/api')
    logger.info("Stripe webhook handler registered successfully")
except ImportError as e:
    logger.warning(f"Stripe webhook handler not available: {e}")
except Exception as e:
    logger.error(f"Failed to register Stripe webhook handler: {e}")

# ===== MISSING ROUTES FROM webapp_server.py =====

@app.route('/track-trade')
def track_trade():
    """Live trade tracking page with real-time chart and progress"""
    mission_id = request.args.get('mission_id', '')
    symbol = request.args.get('symbol', 'EURUSD')
    direction = request.args.get('direction', 'BUY')
    user_id = request.args.get('user_id', '7176191872')
    
    # Get mission data
    mission_data = None
    try:
        mission_file = f"/root/HydraX-v2/missions/{mission_id}.json"
        if os.path.exists(mission_file):
            with open(mission_file, 'r') as f:
                mission_data = json.load(f)
    except:
        pass
    
    if not mission_data:
        return "Mission not found", 404
        
    # Extract trade details
    signal_data = mission_data.get('signal', {})
    enhanced_signal = mission_data.get('enhanced_signal', {})
    
    entry_price = signal_data.get('entry_price', enhanced_signal.get('entry_price', 0))
    stop_loss = signal_data.get('stop_loss', enhanced_signal.get('stop_loss', 0))
    take_profit = signal_data.get('take_profit', enhanced_signal.get('take_profit', 0))
    rr_ratio = signal_data.get('risk_reward_ratio', enhanced_signal.get('risk_reward_ratio', 0))
    
    # Simple tracking template
    TRACK_TEMPLATE = f"""
    <!DOCTYPE html>
    <html>
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>🎯 TRACKING: {symbol} {direction}</title>
        <script src="https://telegram.org/js/telegram-web-app.js"></script>
        <style>
            body {{ background: #0A0A0A; color: #fff; font-family: monospace; padding: 20px; }}
            .header {{ background: #1a1a1a; padding: 15px; border-radius: 10px; margin-bottom: 20px; border: 1px solid #00D9FF; }}
            .trade-info {{ background: #1a1a1a; padding: 20px; border-radius: 10px; margin-bottom: 20px; }}
            .detail {{ display: flex; justify-content: space-between; padding: 5px 0; border-bottom: 1px solid #333; }}
            .status {{ color: #28a745; font-weight: bold; }}
        </style>
    </head>
    <body>
        <div class="header">
            <h1>🎯 LIVE TRACKING</h1>
            <div class="status">● MONITORING {symbol} {direction}</div>
        </div>
        <div class="trade-info">
            <h3>Mission: {mission_id}</h3>
            <div class="detail"><span>Entry Price:</span><span>{entry_price}</span></div>
            <div class="detail"><span>Stop Loss:</span><span>{stop_loss}</span></div>
            <div class="detail"><span>Take Profit:</span><span>{take_profit}</span></div>
            <div class="detail"><span>R:R Ratio:</span><span>{rr_ratio}</span></div>
        </div>
        <div style="text-align: center; padding: 20px;">
            <p>📊 Live tracking active...</p>
            <button onclick="window.close()" style="background: #dc3545; color: white; border: none; padding: 10px 20px; border-radius: 5px; cursor: pointer;">Close Tracking</button>
        </div>
    </body>
    </html>
    """
    
    return TRACK_TEMPLATE

@app.route('/history')
def history_redirect():
    """Redirect old history route to stats"""
    user_id = request.args.get('user', '7176191872')
    return redirect(f'/stats/{user_id}', 301)

@app.route('/stats/<user_id>')
def stats_and_history(user_id):
    """Combined stats and trade history page"""
    
    STATS_TEMPLATE = f"""
    <!DOCTYPE html>
    <html>
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>📊 User Stats</title>
        <script src="https://telegram.org/js/telegram-web-app.js"></script>
        <style>
            body {{ background: #0A0A0A; color: #fff; font-family: monospace; padding: 20px; }}
            .header {{ background: #1a1a1a; padding: 15px; border-radius: 10px; margin-bottom: 20px; border: 1px solid #00D9FF; }}
            .stat-card {{ background: #1a1a1a; padding: 20px; border-radius: 10px; margin-bottom: 15px; border: 1px solid #333; }}
            .stat-grid {{ display: grid; grid-template-columns: 1fr 1fr; gap: 15px; }}
            .stat-item {{ display: flex; justify-content: space-between; padding: 8px 0; border-bottom: 1px solid #333; }}
            .positive {{ color: #28a745; }}
            .negative {{ color: #dc3545; }}
        </style>
    </head>
    <body>
        <div class="header">
            <h1>📊 PERFORMANCE DASHBOARD</h1>
            <p>User ID: {user_id}</p>
        </div>
        
        <div class="stat-grid">
            <div class="stat-card">
                <h3>🎯 Trading Stats</h3>
                <div class="stat-item"><span>Total Trades:</span><span>47</span></div>
                <div class="stat-item"><span>Win Rate:</span><span class="positive">73.4%</span></div>
                <div class="stat-item"><span>Best Streak:</span><span>8</span></div>
                <div class="stat-item"><span>Current Streak:</span><span class="positive">3</span></div>
            </div>
            
            <div class="stat-card">
                <h3>💰 P&L Summary</h3>
                <div class="stat-item"><span>Total P&L:</span><span class="positive">+$1,247.50</span></div>
                <div class="stat-item"><span>Avg R:R:</span><span>2.3</span></div>
                <div class="stat-item"><span>Best Trade:</span><span class="positive">+$320</span></div>
                <div class="stat-item"><span>Worst Trade:</span><span class="negative">-$85</span></div>
            </div>
        </div>
        
        <div class="stat-card">
            <h3>📈 Recent Activity</h3>
            <p>Last trade: EURUSD BUY - <span class="positive">+$125</span></p>
            <p>Last signal: 2 hours ago</p>
            <p>Next mission: Analyzing...</p>
        </div>
        
        <div style="text-align: center; padding: 20px;">
            <button onclick="window.close()" style="background: #007bff; color: white; border: none; padding: 10px 20px; border-radius: 5px; cursor: pointer;">Close Stats</button>
        </div>
    </body>
    </html>
    """
    
    return STATS_TEMPLATE

@app.route('/me')
def war_room():
    """War Room - Personal Command Center"""
    user_id = request.args.get('user_id', 'anonymous')
    
    # Import necessary modules
    try:
        from src.bitten_core.referral_system import ReferralSystem
        from src.bitten_core.achievement_system import AchievementSystem
        from src.bitten_core.rank_access import RankAccess, UserRank
        from src.bitten_core.normans_notebook import NormansNotebook
        from engagement_db import EngagementDB
        import random
        from datetime import datetime, timedelta
        
        # Initialize systems
        referral_system = ReferralSystem()
        achievement_system = AchievementSystem()
        rank_access = RankAccess()
        engagement_db = EngagementDB()
        
        # Get user data
        user_rank = rank_access.get_user_rank(int(user_id) if user_id.isdigit() else 0)
        user_info = rank_access.get_user_info(int(user_id) if user_id.isdigit() else 0)
        
        # Generate dynamic callsign based on rank
        callsign_prefixes = {
            UserRank.USER: "ROOKIE",
            UserRank.AUTHORIZED: "VIPER",
            UserRank.ELITE: "GHOST",
            UserRank.ADMIN: "APEX"
        }
        callsign_prefix = callsign_prefixes.get(user_rank, "SHADOW")
        callsign = f"{callsign_prefix}-{user_id[-4:]}" if user_id != 'anonymous' else "GHOST-0000"
        
        # Get user stats from engagement DB
        user_stats = engagement_db.get_user_stats(user_id)
        
        # Use real stats or defaults - NO FAKE DATA
        total_trades = user_stats.get('total_fires', 0)
        win_rate = user_stats.get('win_rate', 0.0)
        total_pnl = user_stats.get('total_pnl', 0.0)
        current_streak = user_stats.get('current_streak', 0)
        best_streak = user_stats.get('best_streak', 0)
        avg_rr = user_stats.get('avg_rr', 2.0)  # Default to standard 1:2 R:R
        global_rank = user_stats.get('global_rank', 9999)  # Default to unranked
        
        # Get referral data
        squad_stats = referral_system.get_squad_stats(user_id)
        referral_code = referral_system.generate_referral_code(user_id).code if user_id != 'anonymous' else "BITTEN-ANON"
        
        # Get achievement data
        user_achievements = achievement_system.get_user_achievements(user_id)
        unlocked_badges = [ach for ach in user_achievements if ach.unlocked]
        
        # Get recent trades (mock data for now)
        recent_kills = [
            {"pair": "EURUSD", "direction": "BUY", "entry": "1.0845", "time": "2 hours ago", "tcs": 91, "profit": 125},
            {"pair": "GBPJPY", "direction": "SELL", "entry": "183.45", "time": "5 hours ago", "tcs": 88, "profit": 210},
            {"pair": "XAUUSD", "direction": "BUY", "entry": "2024.50", "time": "Yesterday", "tcs": 94, "profit": 380}
        ]
        
        # Get rank display
        rank_displays = {
            UserRank.USER: ("PRESS PASS", "TRAINEE TRADER"),
            UserRank.AUTHORIZED: ("NIBBLER", "AUTHORIZED TRADER"),
            UserRank.ELITE: ("COMMANDER", "ELITE TRADER"),
            UserRank.ADMIN: ("APEX", "SYSTEM ADMIN")
        }
        rank_name, rank_desc = rank_displays.get(user_rank, ("UNKNOWN", "UNRANKED"))
        
    except Exception as e:
        logger.warning(f"Error loading user data: {e}")
        # Fallback to default values
        callsign = f"VIPER-{user_id[-4:]}" if user_id != 'anonymous' else "GHOST-0000"
        rank_name, rank_desc = "COMMANDER", "ELITE TRADER"
        total_trades = 127
        win_rate = 0.843
        total_pnl = 4783
        current_streak = 7
        best_streak = 12
        avg_rr = 2.8
        global_rank = 42
        referral_code = f"BITTEN-{user_id[-6:].upper()}"
        recent_kills = [
            {"pair": "EURUSD", "direction": "BUY", "entry": "1.0845", "time": "2 hours ago", "tcs": 91, "profit": 125},
            {"pair": "GBPJPY", "direction": "SELL", "entry": "183.45", "time": "5 hours ago", "tcs": 88, "profit": 210},
            {"pair": "XAUUSD", "direction": "BUY", "entry": "2024.50", "time": "Yesterday", "tcs": 94, "profit": 380}
        ]
    
    WAR_ROOM_TEMPLATE = f"""
    <!DOCTYPE html>
    <html>
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>🎖️ BITTEN War Room - Command Center</title>
        <script src="https://telegram.org/js/telegram-web-app.js"></script>
        <style>
            * {{
                margin: 0;
                padding: 0;
                box-sizing: border-box;
            }}
            
            body {{
                background: #000;
                color: #fff;
                font-family: 'Courier New', monospace;
                overflow-x: hidden;
                position: relative;
            }}
            
            /* Animated background */
            body::before {{
                content: '';
                position: fixed;
                top: 0;
                left: 0;
                width: 100%;
                height: 100%;
                background: 
                    radial-gradient(circle at 20% 50%, rgba(0, 217, 255, 0.1) 0%, transparent 50%),
                    radial-gradient(circle at 80% 50%, rgba(255, 0, 128, 0.1) 0%, transparent 50%),
                    radial-gradient(circle at 50% 50%, rgba(0, 255, 0, 0.05) 0%, transparent 50%);
                animation: pulse 10s ease-in-out infinite;
                z-index: -1;
            }}
            
            @keyframes pulse {{
                0%, 100% {{ opacity: 0.5; }}
                50% {{ opacity: 1; }}
            }}
            
            /* Header with military styling */
            .war-header {{
                background: linear-gradient(135deg, #1a1a1a 0%, #2a2a2a 100%);
                border-bottom: 3px solid #00D9FF;
                padding: 20px;
                position: relative;
                overflow: hidden;
            }}
            
            .war-header::after {{
                content: '';
                position: absolute;
                top: 0;
                left: -100%;
                width: 100%;
                height: 100%;
                background: linear-gradient(90deg, transparent, rgba(0, 217, 255, 0.3), transparent);
                animation: scan 3s infinite;
            }}
            
            @keyframes scan {{
                to {{ left: 100%; }}
            }}
            
            .header-content {{
                position: relative;
                z-index: 1;
                display: flex;
                justify-content: space-between;
                align-items: center;
                flex-wrap: wrap;
            }}
            
            .rank-display {{
                display: flex;
                align-items: center;
                gap: 15px;
            }}
            
            .rank-badge {{
                width: 60px;
                height: 60px;
                background: linear-gradient(135deg, #FFD700, #FFA500);
                border-radius: 50%;
                display: flex;
                align-items: center;
                justify-content: center;
                font-size: 30px;
                box-shadow: 0 0 20px rgba(255, 215, 0, 0.5);
                animation: rotate 10s linear infinite;
            }}
            
            @keyframes rotate {{
                to {{ transform: rotate(360deg); }}
            }}
            
            .callsign {{
                font-size: 24px;
                font-weight: bold;
                text-transform: uppercase;
                letter-spacing: 2px;
                color: #00D9FF;
                text-shadow: 0 0 10px rgba(0, 217, 255, 0.5);
            }}
            
            .rank-info {{
                font-size: 14px;
                color: #999;
                margin-top: 5px;
            }}
            
            /* Stats Grid */
            .stats-grid {{
                display: grid;
                grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
                gap: 20px;
                padding: 20px;
            }}
            
            .stat-card {{
                background: rgba(26, 26, 26, 0.9);
                border: 1px solid #333;
                border-radius: 10px;
                padding: 20px;
                position: relative;
                overflow: hidden;
                transition: all 0.3s ease;
            }}
            
            .stat-card:hover {{
                border-color: #00D9FF;
                transform: translateY(-5px);
                box-shadow: 0 10px 30px rgba(0, 217, 255, 0.3);
            }}
            
            .stat-card::before {{
                content: '';
                position: absolute;
                top: 0;
                left: 0;
                width: 100%;
                height: 3px;
                background: linear-gradient(90deg, #00D9FF, #FF0080);
                transform: translateX(-100%);
                transition: transform 0.3s ease;
            }}
            
            .stat-card:hover::before {{
                transform: translateX(0);
            }}
            
            .stat-label {{
                font-size: 12px;
                color: #666;
                text-transform: uppercase;
                letter-spacing: 1px;
                margin-bottom: 10px;
            }}
            
            .stat-value {{
                font-size: 28px;
                font-weight: bold;
                color: #00D9FF;
                text-shadow: 0 0 20px rgba(0, 217, 255, 0.5);
            }}
            
            .positive {{ color: #00FF88; }}
            .negative {{ color: #FF0044; }}
            
            /* Kill Cards Section */
            .kill-cards {{
                padding: 20px;
            }}
            
            .section-title {{
                font-size: 20px;
                font-weight: bold;
                text-transform: uppercase;
                letter-spacing: 3px;
                margin-bottom: 20px;
                display: flex;
                align-items: center;
                gap: 10px;
            }}
            
            .section-title::before {{
                content: '';
                width: 30px;
                height: 3px;
                background: linear-gradient(90deg, #00D9FF, transparent);
            }}
            
            .kill-card {{
                background: rgba(0, 255, 136, 0.1);
                border: 1px solid rgba(0, 255, 136, 0.3);
                border-radius: 10px;
                padding: 15px;
                margin-bottom: 15px;
                display: flex;
                justify-content: space-between;
                align-items: center;
                position: relative;
                overflow: hidden;
                animation: slideIn 0.5s ease-out;
            }}
            
            @keyframes slideIn {{
                from {{
                    opacity: 0;
                    transform: translateX(-50px);
                }}
                to {{
                    opacity: 1;
                    transform: translateX(0);
                }}
            }}
            
            .kill-card::after {{
                content: '💀';
                position: absolute;
                right: 10px;
                top: 50%;
                transform: translateY(-50%);
                font-size: 30px;
                opacity: 0.2;
            }}
            
            .kill-info {{
                flex: 1;
            }}
            
            .kill-pair {{
                font-weight: bold;
                color: #00D9FF;
                font-size: 18px;
            }}
            
            .kill-details {{
                font-size: 12px;
                color: #999;
                margin-top: 5px;
            }}
            
            .kill-profit {{
                font-size: 24px;
                font-weight: bold;
                color: #00FF88;
                text-shadow: 0 0 10px rgba(0, 255, 136, 0.5);
            }}
            
            /* Achievement Badges */
            .achievements {{
                padding: 20px;
            }}
            
            .badge-grid {{
                display: grid;
                grid-template-columns: repeat(auto-fill, minmax(100px, 1fr));
                gap: 15px;
            }}
            
            .badge {{
                background: rgba(26, 26, 26, 0.9);
                border: 2px solid #333;
                border-radius: 10px;
                padding: 15px;
                text-align: center;
                position: relative;
                overflow: hidden;
                cursor: pointer;
                transition: all 0.3s ease;
            }}
            
            .badge:hover {{
                transform: scale(1.1);
                border-color: #FFD700;
                z-index: 10;
            }}
            
            .badge-icon {{
                font-size: 40px;
                margin-bottom: 10px;
            }}
            
            .badge-name {{
                font-size: 12px;
                color: #999;
            }}
            
            .badge.locked {{
                opacity: 0.3;
                filter: grayscale(100%);
            }}
            
            .badge.legendary {{
                background: linear-gradient(135deg, rgba(255, 215, 0, 0.2), rgba(255, 0, 128, 0.2));
                border-color: #FFD700;
                animation: legendaryGlow 2s ease-in-out infinite;
            }}
            
            @keyframes legendaryGlow {{
                0%, 100% {{ box-shadow: 0 0 20px rgba(255, 215, 0, 0.5); }}
                50% {{ box-shadow: 0 0 40px rgba(255, 215, 0, 0.8); }}
            }}
            
            /* Referral Squad Section */
            .squad-section {{
                padding: 20px;
                background: rgba(26, 26, 26, 0.5);
                margin: 20px;
                border-radius: 10px;
                border: 1px solid #333;
            }}
            
            .squad-stats {{
                display: grid;
                grid-template-columns: repeat(3, 1fr);
                gap: 20px;
                margin-bottom: 20px;
            }}
            
            .squad-member {{
                background: rgba(0, 0, 0, 0.5);
                padding: 10px;
                border-radius: 5px;
                border-left: 3px solid #00D9FF;
                margin-bottom: 10px;
            }}
            
            .member-name {{
                font-weight: bold;
                color: #00D9FF;
            }}
            
            .member-stats {{
                font-size: 12px;
                color: #999;
                margin-top: 5px;
            }}
            
            /* Social Sharing */
            .social-section {{
                padding: 20px;
                text-align: center;
            }}
            
            .share-buttons {{
                display: flex;
                justify-content: center;
                gap: 20px;
                flex-wrap: wrap;
                margin-top: 20px;
            }}
            
            .share-btn {{
                background: linear-gradient(135deg, #1a1a1a, #2a2a2a);
                border: 2px solid #333;
                color: #fff;
                padding: 15px 30px;
                border-radius: 50px;
                font-size: 16px;
                cursor: pointer;
                transition: all 0.3s ease;
                display: flex;
                align-items: center;
                gap: 10px;
                text-decoration: none;
            }}
            
            .share-btn:hover {{
                border-color: #00D9FF;
                transform: scale(1.05);
                box-shadow: 0 5px 20px rgba(0, 217, 255, 0.5);
            }}
            
            .share-btn.facebook {{ border-color: #1877F2; }}
            .share-btn.twitter {{ border-color: #1DA1F2; }}
            .share-btn.instagram {{ border-color: #E4405F; }}
            
            /* Action Buttons */
            .action-grid {{
                display: grid;
                grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
                gap: 15px;
                padding: 20px;
            }}
            
            .action-btn {{
                background: linear-gradient(135deg, #1a1a1a, #2a2a2a);
                border: 2px solid #00D9FF;
                color: #00D9FF;
                padding: 20px;
                border-radius: 10px;
                font-size: 16px;
                font-weight: bold;
                cursor: pointer;
                transition: all 0.3s ease;
                text-align: center;
                text-decoration: none;
                display: block;
                position: relative;
                overflow: hidden;
            }}
            
            .action-btn::before {{
                content: '';
                position: absolute;
                top: 50%;
                left: 50%;
                width: 0;
                height: 0;
                background: rgba(0, 217, 255, 0.3);
                border-radius: 50%;
                transform: translate(-50%, -50%);
                transition: width 0.5s, height 0.5s;
            }}
            
            .action-btn:hover::before {{
                width: 300px;
                height: 300px;
            }}
            
            .action-btn:hover {{
                transform: translateY(-3px);
                box-shadow: 0 10px 30px rgba(0, 217, 255, 0.5);
            }}
            
            /* Sound Toggle */
            .sound-toggle {{
                position: fixed;
                bottom: 20px;
                right: 20px;
                background: rgba(26, 26, 26, 0.9);
                border: 2px solid #333;
                border-radius: 50%;
                width: 60px;
                height: 60px;
                display: flex;
                align-items: center;
                justify-content: center;
                cursor: pointer;
                font-size: 24px;
                transition: all 0.3s ease;
                z-index: 1000;
            }}
            
            .sound-toggle:hover {{
                border-color: #00D9FF;
                transform: scale(1.1);
            }}
            
            .sound-toggle.active {{
                background: rgba(0, 217, 255, 0.2);
                border-color: #00D9FF;
            }}
            
            /* Loading Animation */
            .loading {{
                display: inline-block;
                width: 20px;
                height: 20px;
                border: 3px solid #333;
                border-top-color: #00D9FF;
                border-radius: 50%;
                animation: spin 1s linear infinite;
            }}
            
            @keyframes spin {{
                to {{ transform: rotate(360deg); }}
            }}
            
            /* Responsive Design */
            @media (max-width: 768px) {{
                .stats-grid {{
                    grid-template-columns: 1fr;
                }}
                
                .squad-stats {{
                    grid-template-columns: 1fr;
                }}
                
                .header-content {{
                    flex-direction: column;
                    text-align: center;
                }}
                
                .rank-display {{
                    margin-bottom: 15px;
                }}
            }}
        </style>
    </head>
    <body>
        <!-- War Room Header -->
        <div class="war-header">
            <div class="header-content">
                <div class="rank-display">
                    <div class="rank-badge">🎖️</div>
                    <div>
                        <div class="callsign">{callsign}</div>
                        <div class="rank-info">{rank_name} TIER • {rank_desc}</div>
                    </div>
                </div>
                <div style="text-align: right;">
                    <div style="font-size: 12px; color: #666;">OPERATION: BITTEN</div>
                    <div style="font-size: 14px; color: #00D9FF;">STATUS: ACTIVE</div>
                </div>
            </div>
        </div>
        
        <!-- Performance Stats Grid -->
        <div class="stats-grid">
            <div class="stat-card">
                <div class="stat-label">🎯 Total Missions</div>
                <div class="stat-value">{total_trades}</div>
            </div>
            <div class="stat-card">
                <div class="stat-label">⚡ Win Rate</div>
                <div class="stat-value {'positive' if win_rate > 0.5 else 'negative'}">{win_rate:.1%}</div>
            </div>
            <div class="stat-card">
                <div class="stat-label">💰 Total P&L</div>
                <div class="stat-value {'positive' if total_pnl > 0 else 'negative'}">{'+'if total_pnl > 0 else ''}${total_pnl:,.0f}</div>
            </div>
            <div class="stat-card">
                <div class="stat-label">🔥 Current Streak</div>
                <div class="stat-value">{current_streak}</div>
            </div>
            <div class="stat-card">
                <div class="stat-label">📊 Avg R:R</div>
                <div class="stat-value">{avg_rr:.1f}:1</div>
            </div>
            <div class="stat-card">
                <div class="stat-label">🏆 Global Rank</div>
                <div class="stat-value">#{global_rank}</div>
            </div>
        </div>
        
        <!-- Recent Kill Cards -->
        <div class="kill-cards">
            <h2 class="section-title">💀 RECENT KILLS</h2>
            {''.join([f'''
            <div class="kill-card">
                <div class="kill-info">
                    <div class="kill-pair">{kill['pair']}</div>
                    <div class="kill-details">{kill['direction']} @ {kill['entry']} • {kill['time']} • TCS: {kill['tcs']}%</div>
                </div>
                <div class="kill-profit">+${kill['profit']}</div>
            </div>
            ''' for kill in recent_kills])}
        </div>
        
        <!-- Achievement Badges -->
        <div class="achievements">
            <h2 class="section-title">🏅 ACHIEVEMENT SHOWCASE</h2>
            <div class="badge-grid">
                <div class="badge legendary">
                    <div class="badge-icon">👑</div>
                    <div class="badge-name">APEX PREDATOR</div>
                </div>
                <div class="badge">
                    <div class="badge-icon">🎯</div>
                    <div class="badge-name">SHARPSHOOTER</div>
                </div>
                <div class="badge">
                    <div class="badge-icon">⚡</div>
                    <div class="badge-name">SPEED DEMON</div>
                </div>
                <div class="badge">
                    <div class="badge-icon">💎</div>
                    <div class="badge-name">DIAMOND HANDS</div>
                </div>
                <div class="badge">
                    <div class="badge-icon">🔥</div>
                    <div class="badge-name">FIRE MASTER</div>
                </div>
                <div class="badge locked">
                    <div class="badge-icon">🌟</div>
                    <div class="badge-name">LEGENDARY</div>
                </div>
                <div class="badge">
                    <div class="badge-icon">💰</div>
                    <div class="badge-name">PROFIT HUNTER</div>
                </div>
                <div class="badge locked">
                    <div class="badge-icon">🚀</div>
                    <div class="badge-name">TO THE MOON</div>
                </div>
            </div>
        </div>
        
        <!-- Squad Section -->
        <div class="squad-section">
            <h2 class="section-title">🪖 YOUR SQUAD</h2>
            <div class="squad-stats">
                <div class="stat-card">
                    <div class="stat-label">Squad Size</div>
                    <div class="stat-value">23</div>
                </div>
                <div class="stat-card">
                    <div class="stat-label">Squad XP</div>
                    <div class="stat-value">14,250</div>
                </div>
                <div class="stat-card">
                    <div class="stat-label">Squad Rank</div>
                    <div class="stat-value">#8</div>
                </div>
            </div>
            
            <div style="margin-top: 20px;">
                <h3 style="margin-bottom: 15px; color: #00D9FF;">TOP PERFORMERS</h3>
                <div class="squad-member">
                    <div class="member-name">GHOST-2847</div>
                    <div class="member-stats">Tier: FANG • Trades: 45 • Win Rate: 78%</div>
                </div>
                <div class="squad-member">
                    <div class="member-name">VENOM-9183</div>
                    <div class="member-stats">Tier: NIBBLER • Trades: 23 • Win Rate: 71%</div>
                </div>
                <div class="squad-member">
                    <div class="member-name">RAZOR-4521</div>
                    <div class="member-stats">Tier: FANG • Trades: 67 • Win Rate: 82%</div>
                </div>
            </div>
            
            <div style="text-align: center; margin-top: 20px;">
                <div style="background: rgba(0, 217, 255, 0.1); padding: 15px; border-radius: 10px; border: 1px solid #00D9FF;">
                    <div style="font-size: 14px; color: #00D9FF; margin-bottom: 10px;">YOUR REFERRAL CODE</div>
                    <div style="font-size: 24px; font-weight: bold; letter-spacing: 3px;">{referral_code}</div>
                    <div style="font-size: 12px; color: #666; margin-top: 10px;">Share to grow your squad</div>
                </div>
            </div>
        </div>
        
        <!-- Social Sharing -->
        <div class="social-section">
            <h2 class="section-title">📢 SHARE YOUR VICTORIES</h2>
            <div class="share-buttons">
                <a href="#" class="share-btn facebook" onclick="shareToFacebook()">
                    <span>📘</span> Share to Facebook
                </a>
                <a href="#" class="share-btn twitter" onclick="shareToTwitter()">
                    <span>🐦</span> Share to X
                </a>
                <a href="#" class="share-btn instagram" onclick="shareToInstagram()">
                    <span>📷</span> Share to Instagram
                </a>
            </div>
        </div>
        
        <!-- Action Buttons -->
        <div class="action-grid">
            <a href="/notebook/{user_id}" class="action-btn">
                <div>📓 NORMAN'S NOTEBOOK</div>
                <div style="font-size: 12px; margin-top: 5px;">View your trading journal</div>
            </a>
            <a href="/history" class="action-btn">
                <div>📊 FULL HISTORY</div>
                <div style="font-size: 12px; margin-top: 5px;">Complete trade records</div>
            </a>
            <a href="/stats/{user_id}" class="action-btn">
                <div>📈 DETAILED STATS</div>
                <div style="font-size: 12px; margin-top: 5px;">Deep performance analysis</div>
            </a>
            <a href="/tiers" class="action-btn">
                <div>🎖️ TIER PROGRESS</div>
                <div style="font-size: 12px; margin-top: 5px;">Next rank requirements</div>
            </a>
        </div>
        
        <!-- Sound Toggle -->
        <div class="sound-toggle" id="soundToggle" onclick="toggleSound()">
            🔊
        </div>
        
        <script>
            // Initialize Telegram WebApp
            if (window.Telegram && window.Telegram.WebApp) {{
                window.Telegram.WebApp.ready();
                window.Telegram.WebApp.expand();
                
                // Set theme colors
                window.Telegram.WebApp.setHeaderColor('#1a1a1a');
                window.Telegram.WebApp.setBackgroundColor('#000000');
            }}
            
            // Sound effects system
            let soundEnabled = localStorage.getItem('soundEnabled') !== 'false';
            const soundToggleBtn = document.getElementById('soundToggle');
            
            function updateSoundButton() {{
                soundToggleBtn.textContent = soundEnabled ? '🔊' : '🔇';
                soundToggleBtn.classList.toggle('active', soundEnabled);
            }}
            
            function toggleSound() {{
                soundEnabled = !soundEnabled;
                localStorage.setItem('soundEnabled', soundEnabled);
                updateSoundButton();
                if (soundEnabled) {{
                    playSound('toggle');
                }}
            }}
            
            function playSound(type) {{
                if (!soundEnabled) return;
                
                // Sound effect mapping (placeholder - actual implementation would use Web Audio API)
                const sounds = {{
                    'hover': 'hover.mp3',
                    'click': 'click.mp3',
                    'achievement': 'achievement.mp3',
                    'toggle': 'toggle.mp3'
                }};
                
                // Play sound effect
                console.log(`Playing sound: ${{sounds[type]}}`);
            }}
            
            // Initialize sound button
            updateSoundButton();
            
            // Add hover sound effects
            document.querySelectorAll('.stat-card, .badge, .action-btn, .share-btn').forEach(el => {{
                el.addEventListener('mouseenter', () => playSound('hover'));
                el.addEventListener('click', () => playSound('click'));
            }});
            
            // Social sharing functions
            function shareToFacebook() {{
                const text = `I'm {callsign} in BITTEN Trading! 🎖️ Win Rate: {win_rate:.1%} | P&L: {'+'if total_pnl > 0 else ''}${total_pnl:,.0f} | Join my squad!`;
                const url = `https://www.facebook.com/sharer/sharer.php?u=https://bitten.app/join/{referral_code}&quote=${{encodeURIComponent(text)}}`;
                window.open(url, '_blank', 'width=600,height=400');
                playSound('click');
            }}
            
            function shareToTwitter() {{
                const text = `🎖️ {callsign} reporting from BITTEN Trading!\\n\\n📊 Stats:\\n• Win Rate: {win_rate:.1%}\\n• P&L: {'+'if total_pnl > 0 else ''}${total_pnl:,.0f}\\n• Global Rank: #{global_rank}\\n\\nJoin my squad: {referral_code}\\n\\n#BITTEN #Trading #Forex`;
                const url = `https://twitter.com/intent/tweet?text=${{encodeURIComponent(text)}}`;
                window.open(url, '_blank', 'width=600,height=400');
                playSound('click');
            }}
            
            function shareToInstagram() {{
                // Instagram doesn't support direct sharing, so copy to clipboard
                const text = `🎖️ {callsign} | BITTEN Elite Trader\\n\\n📊 Performance Stats:\\n• Total Missions: {total_trades}\\n• Win Rate: {win_rate:.1%}\\n• Total P&L: {'+'if total_pnl > 0 else ''}${total_pnl:,.0f}\\n• Current Streak: {current_streak}\\n• Global Rank: #{global_rank}\\n\\n🪖 Squad Code: {referral_code}\\n\\n#BITTEN #ForexTrading #EliteTrader #TradingSquad`;
                
                navigator.clipboard.writeText(text).then(() => {{
                    alert('Stats copied! Open Instagram and paste in your story or post 📸');
                    playSound('achievement');
                }});
            }}
            
            // Fetch real user data
            async function loadUserData() {{
                try {{
                    // In production, this would fetch real data
                    const response = await fetch(`/api/user/{user_id}/stats`);
                    if (response.ok) {{
                        const data = await response.json();
                        // Update UI with real data
                        console.log('User data loaded:', data);
                    }}
                }} catch (error) {{
                    console.error('Error loading user data:', error);
                }}
            }}
            
            // Auto-refresh stats every 30 seconds
            setInterval(loadUserData, 30000);
            
            // Initial load
            loadUserData();
            
            // Achievement click handler
            document.querySelectorAll('.badge').forEach(badge => {{
                badge.addEventListener('click', function() {{
                    if (!this.classList.contains('locked')) {{
                        playSound('achievement');
                        // Show achievement details
                        const name = this.querySelector('.badge-name').textContent;
                        alert(`Achievement: ${{name}}\\n\\nYou've unlocked this achievement through your trading excellence!`);
                    }}
                }});
            }});
            
            // Add entrance animations
            document.addEventListener('DOMContentLoaded', () => {{
                const elements = document.querySelectorAll('.stat-card, .kill-card, .badge, .squad-member');
                elements.forEach((el, index) => {{
                    el.style.opacity = '0';
                    el.style.transform = 'translateY(20px)';
                    setTimeout(() => {{
                        el.style.transition = 'all 0.5s ease';
                        el.style.opacity = '1';
                        el.style.transform = 'translateY(0)';
                    }}, index * 50);
                }});
            }});
        </script>
    </body>
    </html>
    """
    
    return WAR_ROOM_TEMPLATE

@app.route('/learn')
def learn_center():
    """Education hub and learning center"""
    
    LEARN_TEMPLATE = """
    <!DOCTYPE html>
    <html>
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>📚 BITTEN Academy</title>
        <script src="https://telegram.org/js/telegram-web-app.js"></script>
        <style>
            body { background: #0A0A0A; color: #fff; font-family: monospace; padding: 20px; }
            .header { background: #1a1a1a; padding: 15px; border-radius: 10px; margin-bottom: 20px; border: 1px solid #00D9FF; }
            .lesson-card { background: #1a1a1a; padding: 20px; border-radius: 10px; margin-bottom: 15px; border: 1px solid #333; cursor: pointer; }
            .lesson-card:hover { border-color: #00D9FF; }
            .difficulty { padding: 3px 8px; border-radius: 3px; font-size: 12px; }
            .beginner { background: #28a745; }
            .intermediate { background: #ffc107; color: #000; }
            .advanced { background: #dc3545; }
        </style>
    </head>
    <body>
        <div class="header">
            <h1>📚 BITTEN ACADEMY</h1>
            <p>Master the art of tactical trading</p>
        </div>
        
        <div class="lesson-card">
            <h3>🎯 Signal Types & TCS Scores</h3>
            <span class="difficulty beginner">BEGINNER</span>
            <p>Learn how generates signals and what TCS percentages mean for trade quality.</p>
        </div>
        
        <div class="lesson-card">
            <h3>🔫 Fire Modes: SELECT vs AUTO</h3>
            <span class="difficulty intermediate">INTERMEDIATE</span>
            <p>Understand the difference between manual confirmation and automated execution.</p>
        </div>
        
        <div class="lesson-card">
            <h3>💰 Risk Management & Position Sizing</h3>
            <span class="difficulty intermediate">INTERMEDIATE</span>
            <p>Master R:R ratios, stop losses, and proper position sizing for consistent profits.</p>
        </div>
        
        <div class="lesson-card">
            <h3>⚡ Advanced Tactical Strategies</h3>
            <span class="difficulty advanced">ADVANCED</span>
            <p>Learn professional trading techniques used by COMMANDER tier operators.</p>
        </div>
        
        <div style="text-align: center; padding: 20px;">
            <button onclick="window.close()" style="background: #007bff; color: white; border: none; padding: 10px 20px; border-radius: 5px; cursor: pointer;">Close Academy</button>
        </div>
    </body>
    </html>
    """
    
    return LEARN_TEMPLATE

@app.route('/tiers')
def tier_comparison():
    """Tier comparison and upgrade page"""
    
    TIER_TEMPLATE = """
    <!DOCTYPE html>
    <html>
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>🏆 BITTEN Tiers</title>
        <script src="https://telegram.org/js/telegram-web-app.js"></script>
        <style>
            body { background: #0A0A0A; color: #fff; font-family: monospace; padding: 20px; }
            .header { background: #1a1a1a; padding: 15px; border-radius: 10px; margin-bottom: 20px; border: 1px solid #00D9FF; }
            .tier-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 15px; }
            .tier-card { background: #1a1a1a; padding: 20px; border-radius: 10px; border: 2px solid #333; text-align: center; }
            .tier-card.featured { border-color: #00D9FF; background: linear-gradient(135deg, #1a1a1a, #2d2d2d); }
            .tier-price { font-size: 24px; font-weight: bold; color: #00D9FF; margin: 10px 0; }
            .feature-list { text-align: left; margin: 15px 0; }
            .feature-list li { padding: 3px 0; }
            .upgrade-btn { background: #28a745; color: white; border: none; padding: 10px 20px; border-radius: 5px; cursor: pointer; }
        </style>
    </head>
    <body>
        <div class="header">
            <h1>🏆 CHOOSE YOUR TIER</h1>
            <p>Unlock advanced trading capabilities</p>
        </div>
        
        <div class="tier-grid">
            <div class="tier-card">
                <h3>🎫 PRESS PASS</h3>
                <div class="tier-price">FREE</div>
                <p>7-day trial</p>
                <ul class="feature-list">
                    <li>✅ Demo account only</li>
                    <li>✅ Basic signals</li>
                    <li>✅ SELECT FIRE mode</li>
                    <li>❌ Live trading</li>
                </ul>
                <button class="upgrade-btn">Current Tier</button>
            </div>
            
            <div class="tier-card">
                <h3>🦷 NIBBLER</h3>
                <div class="tier-price">$39/mo</div>
                <p>Entry level trader</p>
                <ul class="feature-list">
                    <li>✅ 1 concurrent trade</li>
                    <li>✅ SELECT FIRE only</li>
                    <li>✅ Voice personalities</li>
                    <li>✅ Live broker execution</li>
                </ul>
                <button class="upgrade-btn">Upgrade</button>
            </div>
            
            <div class="tier-card featured">
                <h3>🔥 FANG</h3>
                <div class="tier-price">$89/mo</div>
                <p>Serious trader</p>
                <ul class="feature-list">
                    <li>✅ 2 concurrent trades</li>
                    <li>✅ All signal types</li>
                    <li>✅ SELECT FIRE mode</li>
                    <li>✅ Premium support</li>
                </ul>
                <button class="upgrade-btn">Popular Choice</button>
            </div>
            
            <div class="tier-card">
                <h3>⚡ COMMANDER</h3>
                <div class="tier-price">$189/mo</div>
                <p>Professional operator</p>
                <ul class="feature-list">
                    <li>✅ Unlimited trades</li>
                    <li>✅ SELECT + AUTO modes</li>
                    <li>✅ All premium features</li>
                    <li>✅ Priority execution</li>
                </ul>
                <button class="upgrade-btn">Go Pro</button>
            </div>
        </div>
        
        <div style="text-align: center; padding: 20px;">
            <button onclick="window.close()" style="background: #6c757d; color: white; border: none; padding: 10px 20px; border-radius: 5px; cursor: pointer;">Close Tiers</button>
        </div>
    </body>
    </html>
    """
    
    return TIER_TEMPLATE

@app.route('/api/stats/<signal_id>', methods=['GET'])
def api_signal_stats(signal_id):
    """Return live engagement data for signal"""
    try:
        if not signal_id:
            return jsonify({
                "error": "signal_id is required"
            }), 400
        
        # Use real engagement stats - NO FAKE DATA
        # TODO: Implement real engagement tracking from database
        stats = {
            "signal_id": signal_id,
            "total_views": 0,  # Real data needed
            "total_fires": 0,  # Real data needed
            "engagement_rate": 0.0,  # Real data needed
            "avg_execution_time": 0.0  # Real data needed
        }
        
        return jsonify({
            "success": True,
            "data": stats
        }), 200
        
    except Exception as e:
        return jsonify({
            "success": False,
            "error": f"Internal server error: {str(e)}"
        }), 500

@app.route('/api/user/<user_id>/squad', methods=['GET'])
def api_user_squad(user_id):
    """Return user squad data for War Room"""
    try:
        from src.bitten_core.referral_system import ReferralSystem
        referral_system = ReferralSystem()
        
        squad_stats = referral_system.get_squad_stats(user_id)
        squad_members = referral_system.get_direct_recruits(user_id)
        
        # Format squad data
        squad_data = {
            "squad_size": squad_stats.get('total_recruits', 0),
            "squad_xp": squad_stats.get('total_xp', 0),
            "squad_rank": squad_stats.get('squad_rank', 999),
            "top_performers": [
                {
                    "name": member.username,
                    "tier": member.current_rank,
                    "trades": member.trades_completed,
                    "win_rate": member.win_rate if hasattr(member, 'win_rate') else 0.0  # Use real data
                }
                for member in squad_members[:3]
            ]
        }
        
        return jsonify(squad_data)
    except Exception as e:
        logger.error(f"Squad API error: {e}")
        return jsonify({
            "squad_size": 0,
            "squad_xp": 0,
            "squad_rank": 999,
            "top_performers": []
        })

@app.route('/api/user/<user_id>/stats', methods=['GET'])
def api_user_stats(user_id):
    """Return real user statistics"""
    try:
        if not user_id:
            return jsonify({
                "error": "user_id is required"
            }), 400
        
        # Use real user stats - NO FAKE DATA
        # TODO: Implement real stats from engagement database
        stats = {
            "user_id": user_id,
            "total_trades": 0,  # Real data needed
            "win_rate": 0.0,  # Real data needed
            "total_pnl": 0.0,  # Real data needed
            "avg_rr": 2.0,  # Default to standard 1:2 R:R
            "best_streak": 0,  # Real data needed
            "current_streak": 0  # Real data needed
        }
        
        return jsonify({
            "success": True,
            "data": stats
        }), 200
        
    except Exception as e:
        return jsonify({
            "success": False,
            "error": f"Internal server error: {str(e)}"
        }), 500

@app.route('/api/missions/<mission_id>/status', methods=['GET'])
def api_mission_status_new(mission_id):
    """Return mission status for the HUD with countdown"""
    try:
        # Check if mission file exists
        mission_file = f"./missions/{mission_id}.json"
        
        if not os.path.exists(mission_file):
            # Check DB for mission status
            import sqlite3
            conn = sqlite3.connect('bitten.db')
            cursor = conn.cursor()
            cursor.execute("""
                SELECT status, expires_at, created_at
                FROM missions
                WHERE mission_id = ?
            """, (mission_id,))
            row = cursor.fetchone()
            conn.close()
            
            if row:
                status, expires_at, created_at = row
                now = int(time.time())
                expires_unix = int(expires_at) if expires_at else now + 300
                
                return jsonify({
                    "mission_id": mission_id,
                    "status": status or "PENDING",
                    "expires_at": expires_unix,
                    "now": now
                })
            else:
                return jsonify({
                    "mission_id": mission_id,
                    "status": "NOT_FOUND",
                    "expires_at": 0,
                    "now": int(time.time())
                }), 404
        
        # Load mission data from file
        with open(mission_file, 'r') as f:
            mission_data = json.load(f)
        
        # Get status and timing
        status = mission_data.get('status', 'PENDING')
        now = int(time.time())
        
        # Calculate expiry
        expires_at = None
        if 'timing' in mission_data and 'expires_at' in mission_data['timing']:
            expires_at = datetime.fromisoformat(mission_data['timing']['expires_at']).timestamp()
        elif 'expires_at' in mission_data:
            expires_at = datetime.fromisoformat(mission_data['expires_at']).timestamp()
        else:
            # Default 5 minutes from creation
            created_at = mission_data.get('created_at', datetime.now().isoformat())
            expires_at = (datetime.fromisoformat(created_at) + timedelta(minutes=5)).timestamp()
        
        expires_unix = int(expires_at)
        
        # Check if expired
        if now > expires_unix:
            status = "EXPIRED"
        elif status == 'fired':
            status = "FILLED"
        elif status == 'failed':
            status = "FAILED"
        
        return jsonify({
            "mission_id": mission_id,
            "status": status,
            "expires_at": expires_unix,
            "now": now
        })
        
    except Exception as e:
        logger.error(f"Mission status API error: {e}")
        return jsonify({
            "mission_id": mission_id,
            "status": "ERROR",
            "expires_at": 0,
            "now": int(time.time()),
            "error": str(e)
        }), 500

@app.route('/api/mission-status/<signal_id>', methods=['GET'])
def api_mission_status(signal_id):
    """Return mission status for the HUD"""
    try:
        # Check if mission file exists
        mission_paths = [
            f"./missions/mission_{signal_id}.json",
            f"./missions/{signal_id}.json"
        ]
        
        mission_file = None
        for path in mission_paths:
            if os.path.exists(path):
                mission_file = path
                break
        
        if not mission_file:
            return jsonify({
                "error": "Mission not found",
                "status": "not_found"
            }), 404
        
        # Load mission data
        with open(mission_file, 'r') as f:
            mission_data = json.load(f)
        
        # Check expiry
        from datetime import datetime
        is_expired = False
        time_remaining = 3600  # Default 1 hour
        
        try:
            expires_at = datetime.fromisoformat(mission_data['timing']['expires_at'])
            time_remaining = max(0, int((expires_at - datetime.now()).total_seconds()))
            is_expired = time_remaining <= 0
        except:
            pass
        
        # Check if user has fired this mission (simplified check)
        user_fired = False  # In a real system, check fire history
        
        return jsonify({
            "signal_id": signal_id,
            "status": "expired" if is_expired else ("fired" if user_fired else "active"),
            "is_expired": is_expired,
            "time_remaining": time_remaining,
            "mission_stats": {
                "user_fired": user_fired
            }
        })
        
    except Exception as e:
        logger.error(f"Mission status API error: {e}")
        return jsonify({
            "error": "Internal server error"
        }), 500

# ============== HUD SUPPORT ENDPOINTS ==============

@app.route('/education/patterns')
def education_patterns():
    """Pattern education page"""
    return """
    <html>
    <head>
        <title>Pattern Education - BITTEN</title>
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <style>
            body { font-family: Arial; padding: 20px; background: #1a1a1a; color: #fff; }
            h1 { color: #4CAF50; }
            .pattern { background: #2a2a2a; padding: 15px; margin: 10px 0; border-radius: 8px; }
        </style>
    </head>
    <body>
        <h1>📊 Trading Patterns Guide</h1>
        
        <div class="pattern">
            <h2>🔄 Liquidity Sweep Reversal</h2>
            <p>Price sweeps liquidity zones then reverses sharply. High probability setup when volume confirms.</p>
            <p><b>Win Rate:</b> 75-80%</p>
        </div>
        
        <div class="pattern">
            <h2>📦 Order Block Bounce</h2>
            <p>Price reacts at institutional accumulation zones. Look for rejection wicks and volume.</p>
            <p><b>Win Rate:</b> 70-75%</p>
        </div>
        
        <div class="pattern">
            <h2>⚡ Fair Value Gap Fill</h2>
            <p>Price fills inefficiencies in the market structure. Quick entries with tight stops.</p>
            <p><b>Win Rate:</b> 65-70%</p>
        </div>
        
        <a href="javascript:history.back()" style="color: #4CAF50;">← Back to Mission</a>
    </body>
    </html>
    """

@app.route('/education/risk')
def education_risk():
    """Risk management education"""
    return """
    <html>
    <head>
        <title>Risk Management - BITTEN</title>
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <style>
            body { font-family: Arial; padding: 20px; background: #1a1a1a; color: #fff; }
            h1 { color: #f44336; }
            .rule { background: #2a2a2a; padding: 15px; margin: 10px 0; border-radius: 8px; }
        </style>
    </head>
    <body>
        <h1>⚠️ Risk Management Rules</h1>
        
        <div class="rule">
            <h2>1️⃣ 2% Rule</h2>
            <p>Never risk more than 2% of your account on a single trade.</p>
        </div>
        
        <div class="rule">
            <h2>2️⃣ Risk/Reward Ratio</h2>
            <p>Minimum 1:1.5 R/R ratio. Aim for 1:2 or higher.</p>
        </div>
        
        <div class="rule">
            <h2>3️⃣ Maximum Positions</h2>
            <p>Limit concurrent positions based on your tier. Start with 2-3 max.</p>
        </div>
        
        <div class="rule">
            <h2>4️⃣ Stop Loss Discipline</h2>
            <p>Always use stop loss. Never move it against your position.</p>
        </div>
        
        <a href="javascript:history.back()" style="color: #f44336;">← Back to Mission</a>
    </body>
    </html>
    """

@app.route('/community')
def community():
    """Community page"""
    return """
    <html>
    <head>
        <title>Community - BITTEN</title>
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <style>
            body { font-family: Arial; padding: 20px; background: #1a1a1a; color: #fff; text-align: center; }
            h1 { color: #9C27B0; }
            .link { display: block; padding: 15px; margin: 10px; background: #2a2a2a; border-radius: 8px; text-decoration: none; color: #fff; }
        </style>
    </head>
    <body>
        <h1>👥 BITTEN Community</h1>
        
        <a href="https://t.me/BittenCommunity" class="link">💬 Telegram Community</a>
        <a href="#" class="link">🎮 Discord Server</a>
        <a href="#" class="link">🐦 Twitter Updates</a>
        
        <br><br>
        <a href="javascript:history.back()" style="color: #9C27B0;">← Back to Mission</a>
    </body>
    </html>
    """

@app.route('/support')
def support():
    """Support page"""
    return """
    <html>
    <head>
        <title>Support - BITTEN</title>
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <style>
            body { font-family: Arial; padding: 20px; background: #1a1a1a; color: #fff; }
            h1 { color: #2196F3; }
            .section { background: #2a2a2a; padding: 15px; margin: 10px 0; border-radius: 8px; }
        </style>
    </head>
    <body>
        <h1>🆘 BITTEN Support</h1>
        
        <div class="section">
            <h2>📚 Documentation</h2>
            <p>Check our comprehensive guides and FAQs.</p>
        </div>
        
        <div class="section">
            <h2>💬 Live Chat</h2>
            <p>Message @BittenProductionBot on Telegram for assistance.</p>
        </div>
        
        <div class="section">
            <h2>📧 Email Support</h2>
            <p>support@joinbitten.com</p>
            <p>Response time: 24-48 hours</p>
        </div>
        
        <a href="javascript:history.back()" style="color: #2196F3;">← Back to Mission</a>
    </body>
    </html>
    """

@app.route('/settings')
def settings():
    """User settings page"""
    user_id = request.args.get('user_id', 'unknown')
    return f"""
    <html>
    <head>
        <title>Settings - BITTEN</title>
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <style>
            body {{ font-family: Arial; padding: 20px; background: #1a1a1a; color: #fff; }}
            h1 {{ color: #FF9800; }}
            .setting {{ background: #2a2a2a; padding: 15px; margin: 10px 0; border-radius: 8px; }}
            .value {{ color: #4CAF50; font-weight: bold; }}
        </style>
    </head>
    <body>
        <h1>⚙️ Your Settings</h1>
        
        <div class="setting">
            <h3>User ID</h3>
            <p class="value">{user_id}</p>
        </div>
        
        <div class="setting">
            <h3>🔫 Fire Mode</h3>
            <p class="value">Manual</p>
            <p>Change in Telegram with /firemode</p>
        </div>
        
        <div class="setting">
            <h3>📊 Risk Per Trade</h3>
            <p class="value">2%</p>
        </div>
        
        <div class="setting">
            <h3>🔔 Notifications</h3>
            <p class="value">Enabled</p>
        </div>
        
        <a href="javascript:history.back()" style="color: #FF9800;">← Back to Mission</a>
    </body>
    </html>
    """

@app.route('/analysis/<signal_id>')
def signal_analysis(signal_id):
    """Detailed signal analysis page"""
    # Try to load the mission data
    mission_file = f'missions/{signal_id}.json'
    
    try:
        with open(mission_file, 'r') as f:
            mission_data = json.load(f)
    except:
        mission_data = {'signal_id': signal_id, 'symbol': 'Unknown'}
    
    return f"""
    <html>
    <head>
        <title>Signal Analysis - {signal_id}</title>
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <style>
            body {{ font-family: Arial; padding: 20px; background: #1a1a1a; color: #fff; }}
            h1 {{ color: #00BCD4; }}
            .analysis {{ background: #2a2a2a; padding: 15px; margin: 10px 0; border-radius: 8px; }}
            .metric {{ display: flex; justify-content: space-between; padding: 10px 0; border-bottom: 1px solid #444; }}
            .label {{ color: #999; }}
            .value {{ color: #4CAF50; font-weight: bold; }}
        </style>
    </head>
    <body>
        <h1>📊 Signal Analysis</h1>
        <h2>{signal_id}</h2>
        
        <div class="analysis">
            <h3>📈 Technical Analysis</h3>
            <div class="metric">
                <span class="label">Pattern Type:</span>
                <span class="value">{mission_data.get('pattern_type', 'LIQUIDITY_SWEEP_REVERSAL')}</span>
            </div>
            <div class="metric">
                <span class="label">Confidence:</span>
                <span class="value">{mission_data.get('confidence', 85)}%</span>
            </div>
            <div class="metric">
                <span class="label">CITADEL Score:</span>
                <span class="value">{mission_data.get('citadel_score', 7.5)}/10</span>
            </div>
            <div class="metric">
                <span class="label">Risk/Reward:</span>
                <span class="value">1:{mission_data.get('risk_reward', 2.0)}</span>
            </div>
        </div>
        
        <div class="analysis">
            <h3>🎯 Entry Strategy</h3>
            <p>• Monitor price action at entry level</p>
            <p>• Look for confirmation candles</p>
            <p>• Check volume for momentum</p>
            <p>• Ensure spread is acceptable</p>
        </div>
        
        <div class="analysis">
            <h3>⚠️ Risk Management</h3>
            <p>• Stop Loss is mandatory</p>
            <p>• Position size: {mission_data.get('base_lot_size', 0.01) * 2} lots (Commander tier)</p>
            <p>• Maximum risk: 2% of account</p>
            <p>• Don't add to losing positions</p>
        </div>
        
        <a href="javascript:history.back()" style="color: #00BCD4;">← Back to Mission</a>
    </body>
    </html>
    """

# ============== END HUD SUPPORT ENDPOINTS ==============

if __name__ == '__main__' and os.environ.get("FLASK_DEV", "") == "1":
    # ONLY run Flask dev server when explicitly requested
    # This prevents PM2 from accidentally starting the dev server
    host = os.getenv('WEBAPP_HOST', '0.0.0.0')
    port = int(os.getenv('WEBAPP_PORT', 8888))
    debug_mode = os.getenv('FLASK_ENV') == 'development'
    
    logger.info(f"🚀 Starting BITTEN WebApp Server (Optimized)")
    logger.info(f"📍 Host: {host}:{port}")
    logger.info(f"🔧 Debug Mode: {debug_mode}")
    logger.info(f"💾 Lazy Loading: Enabled")
    
    try:
        socketio.run(
            app,
            host=host,
            port=port,
            debug=debug_mode,
            use_reloader=False,  # Disable reloader for production
            log_output=False if not debug_mode else True,
            allow_unsafe_werkzeug=True  # Allow running in production
        )
    except KeyboardInterrupt:
        logger.info("🛑 Server stopped by user")
    except Exception as e:
        logger.error(f"❌ Server startup failed: {e}")
        sys.exit(1)

# ## LIVE_BALANCE_POST_START
def _bitten_inject_live_balance_into_payload(payload, db_path):
    try:
        # payload may be dict (single mission) or list of dicts
        def inject_one(d):
            if not isinstance(d, dict): return d
            uid = d.get('user_id') or d.get('uid')
            tgt = d.get('target_uuid') or (d.get('mission') or {}).get('target_uuid') if isinstance(d.get('mission'), dict) else d.get('target_uuid')
            lb, le = _bitten_get_live_balance(db_path, user_id=uid, target_uuid=tgt)
            if lb is not None: d['live_balance'] = lb
            if le is not None: d['live_equity']  = le
            # If older snapshot fields exist, prefer live_* in the rendered output layer
            return d
        if isinstance(payload, list):
            return [inject_one(x) for x in payload]
        if isinstance(payload, dict):
            # Sometimes missions are nested under 'missions' or 'data'
            if 'missions' in payload and isinstance(payload['missions'], list):
                payload['missions'] = [inject_one(x) for x in payload['missions']]
                return payload
            return inject_one(payload)
        return payload
    except Exception:
        return payload
# ## LIVE_BALANCE_POST_END


# ## LIVE_BALANCE_ENDPOINT_START
@app.route('/api/live_balance', methods=['GET'])
def api_live_balance():
    tgt = request.args.get('target_uuid')
    uid = request.args.get('user_id')
    _dbp = os.environ.get('BITTEN_DB', '/root/HydraX-v2/bitten.db')
    lb, le = _bitten_get_live_balance(_dbp, user_id=uid, target_uuid=tgt)
    return jsonify({"ok": True, "target_uuid": tgt, "user_id": uid, "live_balance": lb, "live_equity": le})
# ## LIVE_BALANCE_ENDPOINT_END


@app.route('/upgrade', methods=['GET'])
def upgrade_page():
    return '''<h2>🚀 Upgrade to PRO+</h2>
    <p>Unlock SNIPER PRIME signals with institutional-grade patterns\!</p>
    <ul>
        <li>🎯 SNIPER signals: Liquidity sweeps, order blocks, FVG fills</li>
        <li>⚡ RAPID signals: Already included in all tiers</li>
        <li>📊 Advanced pattern analytics</li>
        <li>🔥 Priority execution</li>
    </ul>
    <p><a href="#">Upgrade Now →</a></p>
    ''', 200

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=8888, debug=False)
