#!/usr/bin/env python3
"""
PRODUCTION SAFETY OVERRIDE
CRITICAL: Completely disable emergency fallback in FireRouter to prevent simulation trades
"""

import sys
import os
sys.path.append('/root/HydraX-v2/src/bitten_core')

def patch_fire_router_for_production():
    """Patch FireRouter to completely disable emergency fallback"""
    
    fire_router_path = '/root/HydraX-v2/src/bitten_core/fire_router.py'
    
    # Read current fire router
    with open(fire_router_path, 'r') as f:
        content = f.read()
    
    # Create production-safe version
    patched_content = content.replace(
        'def _execute_emergency_fallback(self, request: TradeRequest, payload: Dict[str, Any], primary_error: str) -> Dict[str, Any]:',
        '''def _execute_emergency_fallback(self, request: TradeRequest, payload: Dict[str, Any], primary_error: str) -> Dict[str, Any]:
        """PRODUCTION SAFETY: Never use emergency fallback for live trades"""
        
        # CRITICAL SAFETY OVERRIDE - DO NOT REMOVE
        logger.critical("üö® PRODUCTION SAFETY: Emergency fallback blocked to prevent simulation trades")
        logger.critical(f"üõë Primary bridge failed: {primary_error}")
        logger.critical("üö® Trade execution REFUSED - Manual intervention required")
        
        return {
            "success": False,
            "message": f"üö® PRODUCTION SAFETY BLOCK: Primary bridge failed - {primary_error}",
            "error_code": "PRODUCTION_SAFETY_EMERGENCY_DISABLED",
            "primary_error": primary_error,
            "safety_override": True,
            "critical_message": "Emergency fallback disabled to prevent accidental simulation trades"
        }
        
        # ORIGINAL EMERGENCY FALLBACK CODE DISABLED FOR PRODUCTION SAFETY
        # This code has been intentionally disabled to prevent users from losing money
        # through accidental simulation trades. Only the live AWS bridge should execute trades.
        
        # The original emergency fallback code is preserved below but commented out:
        '''
    )
    
    # Write the patched version
    backup_path = fire_router_path + '.backup'
    
    # Create backup
    with open(backup_path, 'w') as f:
        f.write(content)
    
    # Write patched version
    with open(fire_router_path, 'w') as f:
        f.write(patched_content)
    
    print("‚úÖ FireRouter patched for production safety")
    print(f"üìù Backup saved to: {backup_path}")
    print("üö® Emergency fallback is now COMPLETELY DISABLED")

def create_aws_bridge_monitor():
    """Create a monitoring script to detect when AWS bridge comes online"""
    
    monitor_script = '''#!/usr/bin/env python3
"""
AWS Bridge Monitor - Detect when production bridge comes online
"""

import socket
import requests
import time
import json
from datetime import datetime

def test_aws_bridge():
    """Test if AWS bridge is online"""
    try:
        # Test socket connection
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.settimeout(5)
        result = sock.connect_ex(('3.145.84.187', 5555))
        sock.close()
        
        if result == 0:
            # Test HTTP health
            response = requests.get('http://3.145.84.187:5555/health', timeout=5)
            if response.status_code == 200:
                data = response.json()
                return True, data
        
        return False, None
        
    except Exception as e:
        return False, str(e)

def monitor_bridge():
    """Monitor AWS bridge status"""
    print("üîç AWS Bridge Monitor Started")
    print("Checking 3.145.84.187:5555 every 30 seconds...")
    print("Press Ctrl+C to stop")
    
    last_status = False
    
    while True:
        try:
            online, data = test_aws_bridge()
            current_time = datetime.now().strftime("%H:%M:%S")
            
            if online and not last_status:
                print(f"‚úÖ {current_time} - AWS BRIDGE ONLINE!")
                if data:
                    print(f"   Agent: {data.get('agent_id', 'Unknown')}")
                    print(f"   Enhanced: {'Yes' if 'socket_running' in data else 'No'}")
                last_status = True
                
            elif not online and last_status:
                print(f"‚ùå {current_time} - AWS bridge went offline")
                last_status = False
                
            elif online:
                print(f"‚úÖ {current_time} - Bridge online")
            else:
                print(f"‚ùå {current_time} - Bridge offline")
                
            time.sleep(30)
            
        except KeyboardInterrupt:
            print("\\nüõë Monitor stopped")
            break
        except Exception as e:
            print(f"‚ùå Monitor error: {e}")
            time.sleep(30)

if __name__ == "__main__":
    monitor_bridge()
'''
    
    monitor_path = '/root/HydraX-v2/aws_bridge_monitor.py'
    with open(monitor_path, 'w') as f:
        f.write(monitor_script)
    
    # Make executable
    os.chmod(monitor_path, 0o755)
    
    print(f"üì° AWS Bridge Monitor created: {monitor_path}")
    print("Run with: python3 aws_bridge_monitor.py")

def create_production_config():
    """Create production configuration documentation"""
    
    config_doc = f'''# PRODUCTION FIRE ROUTER CONFIGURATION
# Generated: {datetime.now()}

## CRITICAL SAFETY MEASURES IMPLEMENTED

### 1. Emergency Fallback DISABLED
- FireRouter has been patched to completely disable emergency fallback
- Local emergency bridge will NEVER be used for live trades
- This prevents users from losing money through simulation trades

### 2. AWS Bridge Configuration
- Production Bridge: 3.145.84.187:5555
- Enhanced MT5 Bridge: Deployed with socket functionality
- Live trades will ONLY execute through AWS bridge

### 3. Network Connectivity Status
- Current Status: No connectivity from this Linux server to AWS
- Possible Causes: Firewall, security groups, network routing
- Resolution: Manual intervention required on AWS/network side

### 4. Enhanced MT5 Bridge Features (Deployed)
- Socket listener on port 9000 (when accessible)
- Ping command: Returns MT5 account status
- Fire command: Executes real MT5 trades
- Console logging in required format
- Auto-reconnect MT5 functionality

## PRODUCTION SAFETY CHECKLIST

‚úÖ Emergency fallback disabled in FireRouter
‚úÖ Enhanced MT5 bridge code deployed to AWS
‚ùå Network connectivity to AWS bridge (manual fix needed)
‚ùå Socket functionality testing (depends on connectivity)

## WHEN AWS CONNECTIVITY IS RESTORED

1. Test enhanced bridge:
   python3 test_mt5_socket_bridge.py

2. Monitor bridge status:
   python3 aws_bridge_monitor.py

3. Verify production router:
   python3 configure_live_fire_router.py

## CRITICAL SAFETY NOTES

üö® NEVER re-enable emergency fallback for live trades
üö® ONLY use AWS bridge for real trade execution
üö® Local emergency bridge is for development/testing ONLY

Emergency fallback has been completely disabled to protect user accounts.
'''
    
    config_path = '/root/HydraX-v2/PRODUCTION_SAFETY_STATUS.md'
    with open(config_path, 'w') as f:
        f.write(config_doc)
    
    print(f"üìã Production status documented: {config_path}")

def main():
    """Main safety override function"""
    print("üîí PRODUCTION SAFETY OVERRIDE")
    print("=" * 40)
    print("üö® DISABLING EMERGENCY FALLBACK FOR USER SAFETY")
    print()
    
    # Step 1: Patch FireRouter to disable emergency fallback
    patch_fire_router_for_production()
    print()
    
    # Step 2: Create monitoring tools
    create_aws_bridge_monitor()
    print()
    
    # Step 3: Document current status
    create_production_config()
    print()
    
    print("üéØ PRODUCTION SAFETY MEASURES COMPLETE")
    print("=" * 40)
    print("‚úÖ Emergency fallback DISABLED")
    print("‚úÖ User accounts protected from simulation trades")
    print("‚úÖ Monitoring tools created")
    print("‚úÖ Configuration documented")
    print()
    print("üîß NEXT STEPS:")
    print("1. Resolve AWS connectivity issue")
    print("2. Run: python3 aws_bridge_monitor.py")
    print("3. Test when bridge comes online")

if __name__ == "__main__":
    from datetime import datetime
    main()