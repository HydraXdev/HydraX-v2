#!/usr/bin/env python3
"""
Test WebApp API for mission retrieval
Demonstrates how the WebApp can retrieve mission files generated by the integrated system
"""

import json
import os
import sys
from datetime import datetime
from typing import Dict, List, Optional

# Add the src directory to the path
sys.path.append('/root/HydraX-v2/src')

# Mission storage directory
MISSION_DIR = "./missions/"

class MissionAPI:
    """Simple API for mission retrieval - WebApp integration demonstration"""
    
    def __init__(self):
        self.mission_dir = MISSION_DIR
    
    def get_mission(self, mission_id: str) -> Optional[Dict]:
        """Get a specific mission by ID"""
        try:
            file_path = os.path.join(self.mission_dir, f"{mission_id}.json")
            
            if not os.path.exists(file_path):
                return None
            
            with open(file_path, 'r', encoding='utf-8') as f:
                mission_data = json.load(f)
            
            # Check if mission is expired
            expires_timestamp = mission_data.get("expires_timestamp")
            if expires_timestamp and expires_timestamp < int(datetime.now().timestamp()):
                return None
            
            return mission_data
            
        except Exception as e:
            print(f"Error retrieving mission {mission_id}: {e}")
            return None
    
    def get_active_missions(self, user_id: str = None) -> List[Dict]:
        """Get all active missions, optionally filtered by user"""
        active_missions = []
        current_time = int(datetime.now().timestamp())
        
        try:
            if not os.path.exists(self.mission_dir):
                return active_missions
            
            for filename in os.listdir(self.mission_dir):
                if filename.endswith(".json") and not filename.endswith(".backup"):
                    file_path = os.path.join(self.mission_dir, filename)
                    
                    try:
                        with open(file_path, 'r', encoding='utf-8') as f:
                            mission_data = json.load(f)
                        
                        # Check if mission is active
                        expires_timestamp = mission_data.get("expires_timestamp")
                        if expires_timestamp and expires_timestamp >= current_time:
                            # Filter by user if specified
                            if user_id is None or mission_data.get("user_id") == user_id:
                                active_missions.append(mission_data)
                    
                    except Exception as e:
                        print(f"Error reading mission file {filename}: {e}")
            
            # Sort by creation time (newest first)
            active_missions.sort(key=lambda x: x.get("created_timestamp", 0), reverse=True)
            
        except Exception as e:
            print(f"Error retrieving active missions: {e}")
        
        return active_missions
    
    def get_mission_summary(self, mission_id: str) -> Optional[Dict]:
        """Get a summary of a mission for display"""
        mission = self.get_mission(mission_id)
        if not mission:
            return None
        
        # Calculate remaining time
        expires_timestamp = mission.get("expires_timestamp")
        current_time = int(datetime.now().timestamp())
        remaining_seconds = max(0, expires_timestamp - current_time) if expires_timestamp else 0
        
        # Format remaining time
        if remaining_seconds > 3600:
            remaining_time = f"{remaining_seconds // 3600}h {(remaining_seconds % 3600) // 60}m"
        elif remaining_seconds > 60:
            remaining_time = f"{remaining_seconds // 60}m {remaining_seconds % 60}s"
        else:
            remaining_time = f"{remaining_seconds}s"
        
        return {
            "mission_id": mission["mission_id"],
            "symbol": mission["symbol"],
            "type": mission["type"],
            "direction": mission["direction"],
            "entry_price": mission["entry_price"],
            "tp": mission["tp"],
            "sl": mission["sl"],
            "tcs": mission["tcs"],
            "user_tier": mission.get("user_tier", "UNKNOWN"),
            "pattern_name": mission.get("pattern_name", "Unknown"),
            "timeframe": mission.get("timeframe", "M5"),
            "session": mission.get("session", "UNKNOWN"),
            "confidence": mission.get("confidence", 0.0),
            "confluence_count": mission.get("confluence_count", 1),
            "remaining_time": remaining_time,
            "remaining_seconds": remaining_seconds,
            "expires_at": mission["expires_at"],
            "account_balance": mission["account_balance"],
            "risk": mission["risk"],
            "lot_size": mission["lot_size"]
        }
    
    def get_user_dashboard(self, user_id: str) -> Dict:
        """Get dashboard data for a user"""
        user_missions = self.get_active_missions(user_id)
        
        # Calculate statistics
        total_missions = len(user_missions)
        arcade_count = sum(1 for m in user_missions if m.get("type") == "arcade")
        sniper_count = sum(1 for m in user_missions if m.get("type") == "sniper")
        hammer_count = sum(1 for m in user_missions if m.get("type") == "midnight_hammer")
        
        # Calculate average TCS
        total_tcs = sum(m.get("tcs", 0) for m in user_missions)
        avg_tcs = total_tcs / total_missions if total_missions > 0 else 0
        
        # Get user tier from most recent mission
        user_tier = "UNKNOWN"
        if user_missions:
            user_tier = user_missions[0].get("user_tier", "UNKNOWN")
        
        return {
            "user_id": user_id,
            "user_tier": user_tier,
            "total_active_missions": total_missions,
            "mission_breakdown": {
                "arcade": arcade_count,
                "sniper": sniper_count,
                "midnight_hammer": hammer_count
            },
            "average_tcs": round(avg_tcs, 1),
            "recent_missions": [self.get_mission_summary(m["mission_id"]) for m in user_missions[:5]]
        }

def main():
    """Test the WebApp Mission API"""
    print("=== WEBAPP MISSION API TEST ===")
    
    # Initialize API
    api = MissionAPI()
    
    # Test getting all active missions
    print("\n=== ALL ACTIVE MISSIONS ===")
    all_missions = api.get_active_missions()
    print(f"Found {len(all_missions)} active missions")
    
    for mission in all_missions:
        summary = api.get_mission_summary(mission["mission_id"])
        if summary:
            print(f"- {summary['mission_id']}: {summary['symbol']} {summary['direction']} "
                  f"({summary['type']}) - {summary['remaining_time']} remaining")
    
    # Test getting missions for specific user
    print("\n=== USER SPECIFIC MISSIONS ===")
    user_missions = api.get_active_missions("test_user_123")
    print(f"Found {len(user_missions)} missions for user test_user_123")
    
    for mission in user_missions:
        summary = api.get_mission_summary(mission["mission_id"])
        if summary:
            print(f"- {summary['symbol']} {summary['direction']} @ {summary['entry_price']} "
                  f"| TCS: {summary['tcs']}% | {summary['remaining_time']} left")
    
    # Test getting specific mission
    print("\n=== SPECIFIC MISSION RETRIEVAL ===")
    if all_missions:
        mission_id = all_missions[0]["mission_id"]
        mission = api.get_mission(mission_id)
        if mission:
            print(f"Retrieved mission: {mission_id}")
            print(f"  Symbol: {mission['symbol']}")
            print(f"  Type: {mission['type']}")
            print(f"  Direction: {mission['direction']}")
            print(f"  Entry: {mission['entry_price']}")
            print(f"  TP: {mission['tp']} | SL: {mission['sl']}")
            print(f"  TCS: {mission['tcs']}%")
            print(f"  User Tier: {mission.get('user_tier', 'UNKNOWN')}")
            print(f"  Pattern: {mission.get('pattern_name', 'Unknown')}")
            print(f"  Confluence: {mission.get('confluence_count', 1)}")
    
    # Test user dashboard
    print("\n=== USER DASHBOARD ===")
    dashboard = api.get_user_dashboard("test_user_123")
    print(f"User: {dashboard['user_id']}")
    print(f"Tier: {dashboard['user_tier']}")
    print(f"Active Missions: {dashboard['total_active_missions']}")
    print(f"Mission Breakdown: {dashboard['mission_breakdown']}")
    print(f"Average TCS: {dashboard['average_tcs']}%")
    print("\nRecent Missions:")
    for mission in dashboard['recent_missions']:
        if mission:
            print(f"  - {mission['symbol']} {mission['direction']} | "
                  f"TCS: {mission['tcs']}% | {mission['remaining_time']} left")
    
    # Test dashboard for different user
    print("\n=== DIFFERENT USER DASHBOARD ===")
    dashboard2 = api.get_user_dashboard("test_user_456")
    print(f"User: {dashboard2['user_id']}")
    print(f"Tier: {dashboard2['user_tier']}")
    print(f"Active Missions: {dashboard2['total_active_missions']}")
    print(f"Mission Breakdown: {dashboard2['mission_breakdown']}")
    print(f"Average TCS: {dashboard2['average_tcs']}%")
    
    # Test mission summary formatting
    print("\n=== MISSION SUMMARY FORMATTING ===")
    if all_missions:
        for mission in all_missions[:3]:  # Show first 3 missions
            summary = api.get_mission_summary(mission["mission_id"])
            if summary:
                print(f"\nðŸŽ¯ {summary['mission_id']}")
                print(f"   {summary['symbol']} {summary['direction']} @ {summary['entry_price']}")
                print(f"   Type: {summary['type'].upper()} | TCS: {summary['tcs']}%")
                print(f"   Pattern: {summary['pattern_name']} | Confluence: {summary['confluence_count']}x")
                print(f"   TP: {summary['tp']} | SL: {summary['sl']}")
                print(f"   Session: {summary['session']} | Timeframe: {summary['timeframe']}")
                print(f"   Time Left: {summary['remaining_time']}")
                print(f"   User Tier: {summary['user_tier']}")
    
    print("\n=== WEBAPP API TEST COMPLETE ===")
    print("WebApp can successfully retrieve mission files!")

if __name__ == "__main__":
    main()